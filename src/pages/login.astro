---
export const prerender = false;

import Layout from '../layouts/Layout.astro';
import { getTranslator } from '@gudupao/astro-i18n';
import { loginPassword, loginCode } from '../lib/auth/service';
import { setAuthCookies } from '../lib/auth/store';

// i18n
const lang = Astro.params.lang || Astro.cookies.get('lang')?.value || 'en';
const t = getTranslator(lang);

// query params
const url = new URL(Astro.request.url);
const nextParam = url.searchParams.get('next') || '/';
const currentMode = (url.searchParams.get('mode') || 'password').toLowerCase();

// ui state
let error: string | null = null;

// handle POST
if (Astro.request.method === 'POST') {
  try {
    const form = await Astro.request.formData();
    const mode = String(form.get('mode') || 'password').toLowerCase();
    const secure = Boolean(import.meta.env.PROD);

    if (mode === 'password') {
      const username = String(form.get('username') || '');
      const password = String(form.get('password') || '');
      if (!username || !password) {
        throw new Error(t('login.usernameRequired'));
      }
      const result = await loginPassword(username, password);
      // httpOnly for SSR & backend calls
      setAuthCookies(Astro.cookies, result.token, result.expires_in);
      // readable cookie for client-side fetch when needed
      const expDate = new Date(Date.now() + result.expires_in * 1000);
      Astro.cookies.set('auth_token_js', result.token, {
        httpOnly: false,
        sameSite: 'lax',
        secure,
        path: '/',
        maxAge: result.expires_in,
        expires: expDate,
      });
      // redirect to next
      return Astro.redirect(nextParam);
    } else if (mode === 'code') {
      const code = String(form.get('code') || '');
      if (!code) {
        throw new Error(t('login.codeRequired'));
      }
      const result = await loginCode(code);
      setAuthCookies(Astro.cookies, result.token, result.expires_in);
      const expDate = new Date(Date.now() + result.expires_in * 1000);
      Astro.cookies.set('auth_token_js', result.token, {
        httpOnly: false,
        sameSite: 'lax',
        secure,
        path: '/',
        maxAge: result.expires_in,
        expires: expDate,
      });
      return Astro.redirect(nextParam);
    } else {
      throw new Error(t('login.unsupportedLoginMethod'));
    }
  } catch (e: any) {
    error = e?.message || t('login.loginFailed');
  }
}
---

<Layout title={t('login.title')}>
  <div class="login-page">
    <div class="login-card">
      <h1 class="title">{t('login.title')}</h1>
      <p class="subtitle">{t('login.subtitle')}</p>

      <div class="tabs">
        <a href={`/login?mode=password&next=${encodeURIComponent(nextParam)}`} class={`tab ${currentMode === 'password' ? 'active' : ''}`}>{t('login.usernamePasswordTab')}</a>
        <a href={`/login?mode=code&next=${encodeURIComponent(nextParam)}`} class={`tab ${currentMode === 'code' ? 'active' : ''}`}>{t('login.codeTab')}</a>
      </div>

      {error && (
        <div class="error-box">
          <span>⚠️</span>
          <span class="error-text">{error}</span>
        </div>
      )}

      {currentMode === 'password' ? (
        <form method="POST" class="form">
          <input type="hidden" name="mode" value="password" />
          <input type="hidden" name="next" value={nextParam} />
          <div class="field">
            <label for="username">{t('login.usernameLabel')}</label>
            <input id="username" name="username" type="text" placeholder="demo" required />
          </div>
          <div class="field">
            <label for="password">{t('login.passwordLabel')}</label>
            <input id="password" name="password" type="password" placeholder="•••••••" required />
          </div>
          <button type="submit" class="submit">{t('login.loginButton')}</button>
        </form>
      ) : (
        <form method="POST" class="form">
          <input type="hidden" name="mode" value="code" />
          <input type="hidden" name="next" value={nextParam} />
          <div class="field">
            <label for="code">{t('login.codeLabel')}</label>
            <input id="code" name="code" type="text" placeholder="DEMO-CODE" required />
          </div>
          <button type="submit" class="submit">{t('login.loginButton')}</button>
        </form>
      )}

      <div class="helper">
        <p>{t('login.successRedirect')} <code>{nextParam}</code></p>
      </div>
    </div>
  </div>
</Layout>

<style>
  .login-page {
    width: 100%;
    height: calc(100vh - 80px);
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 24px;
    box-sizing: border-box;
  }
  .login-card {
    width: 100%;
    max-width: 460px;
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 16px;
    box-shadow: 0 8px 24px var(--shadow-light);
    padding: 24px;
  }
  .title {
    margin: 0;
    font-size: 24px;
    color: var(--text-primary);
  }
  .subtitle {
    margin: 6px 0 18px 0;
    color: var(--text-secondary);
    font-size: 14px;
  }
  .tabs {
    display: flex;
    gap: 8px;
    margin-bottom: 16px;
  }
  .tab {
    flex: 1;
    text-align: center;
    padding: 10px 12px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    text-decoration: none;
    color: var(--text-primary);
    background: var(--bg-primary);
    transition: all .2s ease;
  }
  .tab:hover {
    border-color: var(--accent-color);
  }
  .tab.active {
    border-color: var(--accent-color);
    color: white;
    background: var(--accent-color);
  }
  .error-box {
    display: flex;
    align-items: center;
    gap: 8px;
    background: #fee;
    border: 1px solid #f44336;
    color: #c62828;
    padding: 10px 12px;
    border-radius: 8px;
    margin-bottom: 12px;
  }
  .form .field {
    display: flex;
    flex-direction: column;
    gap: 6px;
    margin-bottom: 12px;
  }
  label {
    color: var(--text-secondary);
    font-size: 13px;
  }
  input[type="text"], input[type="password"] {
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 10px 12px;
    background: var(--bg-primary);
    color: var(--text-primary);
    outline: none;
  }
  input:focus {
    border-color: var(--accent-color);
  }
  .submit {
    width: 100%;
    padding: 10px 12px;
    background: var(--accent-color);
    color: white;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 600;
    transition: background-color .2s ease;
    margin-top: 8px;
  }
  .submit:hover {
    background: var(--accent-hover);
  }
  .helper {
    margin-top: 10px;
    color: var(--text-secondary);
    font-size: 12px;
  }
</style>