---
export const prerender = false;

import Layout from '../../layouts/Layout.astro';
import DynamicWorkflow from '../../components/DynamicWorkflow.astro';
import { getWorkflowParams, executeWorkflowWithForm } from '../../api/workflows';
import { getTranslator } from '@gudupao/astro-i18n';
import { ensureMeSSR } from '../../lib/auth/guard';
import { getUserGenerationHistoryDetail } from '../../api/workflows';
import { toBackendAbsoluteUrl } from '../../lib/api/client';

import CanCmp from '../../components/Can.astro';

// Get language from params or cookie
const lang = Astro.params.lang || Astro.cookies.get('lang')?.value || 'en';
const t = getTranslator(lang);

// Get API URL
const API_ORIGIN = import.meta.env.VITE_API_BASE_URL || "http://127.0.0.1:1145";
const apiUrlTwo = API_ORIGIN.endsWith("/") ? API_ORIGIN.slice(0, -1) : API_ORIGIN;

// Guard: require logged-in and fetch claims
const cookieHeader = Astro.request.headers.get('cookie');
const guard = await ensureMeSSR(Astro.request.url, cookieHeader);
if (guard.response) {
  // Not logged in or token invalid -> redirect to login
  return guard.response;
}
const me = guard.me!;

// Get execution ID from URL parameters and decode it
const { execution_id: encoded_execution_id } = Astro.params;
let execution_id = '';
if (encoded_execution_id) {
  try {
    execution_id = decodeURIComponent(String(encoded_execution_id));
  } catch {
    execution_id = String(encoded_execution_id);
  }
}

let workflowParams: any[] = [];
let loading = true;
let error: string | null = null;
let workflowTitle = `Execution ${execution_id}`;
let executionResult: any = null;
let executionImages: string[] | null = null;
let executionError: string | null = null;
let initialValues: Record<string, any> = {};

// Validate execution ID
if (!execution_id) {
  error = 'Execution ID is required';
  loading = false;
} else {
  console.log(`Loading execution: ${execution_id}`);
  console.log(`Execution ID type: ${typeof execution_id}, length: ${execution_id.length}`);

  try {
    // Fetch user generation history detail
    const historyDetail = await getUserGenerationHistoryDetail(execution_id as string, { cookies: cookieHeader || undefined });

    // Extract workflow information from history detail
    if (historyDetail && historyDetail.input_params && historyDetail.input_params.nodes) {
      workflowParams = historyDetail.input_params.nodes;
      executionImages = historyDetail.result?.images || null;
      executionResult = historyDetail.result || null;

      // Extract initial values from history data
      historyDetail.input_params.nodes.forEach((node: any) => {
        if (node.value !== undefined) {
          initialValues[node.node_id] = node.value;
        }
      });
    }

    // Set a more user-friendly title
    workflowTitle = `Execution ${execution_id}`;

  } catch (err: unknown) {
    console.error(`Error loading execution ${execution_id}:`, err);
    error = (err as Error).message || `Failed to load execution: ${execution_id}`;
  } finally {
    loading = false;
  }
}

// Handle form submission (if needed for re-execution)
if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    const workflowId = formData.get('workflowId') as string;

    const paramsRaw = formData.get('params') as string;
    console.log('[history] POST received. workflowId=%s paramsRaw.length=%d', workflowId, paramsRaw?.length ?? 0);

    let params: any[] = [];
    try {
      params = JSON.parse(paramsRaw);
    } catch (e) {
      console.error('[history] Failed to parse params JSON:', e);
      params = [];
    }

    // Prepare nodes data
    const nodes = JSON.stringify(params.map((param: any) => ({
      node_id: param.node_id,
      title: param.title,
      class_type: param.class_type
    })));

    try {
      console.log('[history] Prepared nodes typeof=%s length=%d preview=%s', typeof nodes, nodes?.length ?? 0, String(nodes).slice(0, 300));
    } catch {}

    // Execute workflow
    const response = await executeWorkflowWithForm(workflowId, nodes, { cookies: cookieHeader || undefined });
    // Normalize response and collect images directly for frontend display
    executionImages = (response as any)?.images ?? (response as any)?.result?.images ?? null;
    executionResult = (response as any)?.result ?? response;
  } catch (err: unknown) {
    console.error('Error executing workflow:', err);
    executionError = (err as Error).message || 'Failed to execute workflow';
  }
}
---

<Layout>
  <div class="workflow-page">
    <div class="workflow-header">
      <a href="/me" class="back-link">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M19 12H5M12 19l-7-7 7-7" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
        {t('history.detail.backToHistory')}
      </a>
      <h1 class="workflow-title">{workflowTitle}</h1>
    </div>

    <div class="workflow-content">
      {loading ? (
        <div class="loading-container">
          <div class="loading-spinner"></div>
          <p>{t('history.detail.loading')}</p>
        </div>
      ) : error ? (
        <div class="error-container">
          <div class="error-icon">‚ö†Ô∏è</div>
          <h3>{t('history.detail.error')}</h3>
          <p class="error-message">{error}</p>
          <a href="/me" class="retry-link">{t('history.detail.backToHistory')}</a>
        </div>
      ) : (
        <div class="two-column-layout">
          <div class="left-column">
            <div class="workflow-container">
              <DynamicWorkflow
                params={workflowParams}
                workflowId={execution_id!}
                executionResult={null}
                executionError={null}
                apiUrlTwo={apiUrlTwo}
                initialValues={initialValues}
                showExecuteButton={false}
                readOnly={true}
              />
            </div>
          </div>
          <div class="right-column">
            <div class="results-container">
              {executionImages && executionImages.length > 0 && (
                <div class="execution-result">
                  <h3>{t('dynamicworkflow.result')}:</h3>
                  <div>
                    {executionImages.map((img: string) => {
                      let imageUrl;
                      const imgStr = String(img);
                      const isData = imgStr.startsWith('data:');
                      if (imgStr.startsWith('data:')) {
                        // Base64 data URL - ensure it's properly encoded
                        imageUrl = imgStr;
                      } else if (imgStr.startsWith('http')) {
                        // HTTP URL
                        imageUrl = imgStr;
                      } else {
                        // File path - construct full URL
                        imageUrl = toBackendAbsoluteUrl(`/comfy_out_image/${imgStr}`);
                      }

                      return (
                        <a
                          href={isData ? "javascript:void(0)" : imageUrl}
                          target="_blank"
                          rel="noopener noreferrer"
                        >
                          <img
                            src={imageUrl}
                            alt="Result image"
                            loading="lazy"
                            style="max-width: 100%; height: auto; border-radius: 8px; border: 1px solid var(--border-color); margin-bottom: 1rem;"
                            onerror="console.error('Image load error:', this.src)"
                          />
                        </a>
                      );
                    })}
                  </div>
                </div>
              )}

              {executionError && (
                <div class="execution-error">
                  <h3>{t('dynamicworkflow.error')}:</h3>
                  <p>{executionError}</p>
                </div>
              )}

              {!executionImages && executionResult && (
                <div class="execution-result">
                  <h3>{t('dynamicworkflow.result')}:</h3>
                  <pre>{JSON.stringify(executionResult, null, 2)}</pre>
                </div>
              )}

              {!executionImages && !executionResult && !executionError && (
                <div class="no-results">
                  <div class="no-results-icon">üìä</div>
                  <h3>{t('workflow.resultsWillAppearHere')}</h3>
                  <p>{t('workflow.executeToSeeResults')}</p>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  </div>
</Layout>

{/* Preview Modal */}
<div id="preview-modal" class="preview-modal" style="display:none;">
  <span class="close">&times;</span>
  <img class="preview-modal-content" id="preview-image" />
</div>

<script>
  {/* Client-side script to handle image preview */}
  {/* This script runs after the page is hydrated */}
  document.addEventListener('DOMContentLoaded', () => {
    // Add click event listeners to all result images
    const images = document.querySelectorAll('.execution-result img');
    images.forEach(img => {
      img.addEventListener('click', (e) => {
        const target = e.target as HTMLImageElement;
        const src = target.src;

        if (src) {
          try {
            // Set the source of the preview image
            const previewImage = document.getElementById('preview-image') as HTMLImageElement;
            if (previewImage) {
              previewImage.src = src;
            }

            // Show the preview modal
            const modal = document.getElementById('preview-modal');
            if (modal) {
              modal.style.display = 'block';
            }
          } catch (error) {
            console.error('Error handling image preview:', error);
          }
        }
      });
    });

    // Add click event listener to close the modal when clicking on the close button or outside the image
    const modal = document.getElementById('preview-modal');
    if (modal) {
      modal.addEventListener('click', (e) => {
        if (e.target === modal || (e.target as HTMLElement).classList.contains('close')) {
          modal.style.display = 'none';
        }
      });
    }
  });
</script>

<style>
  .workflow-page {
    width: 100%;
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
    overflow-x: hidden;
    box-sizing: border-box;
  }

  .workflow-header {
    margin-bottom: 2rem;
  }

  .back-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--text-secondary);
    text-decoration: none;
    font-size: 0.9rem;
    padding: 0.5rem 0;
    transition: color 0.2s ease;
    margin-bottom: 1rem;
  }

  .back-link:hover {
    color: var(--accent-color);
  }

  .back-link svg {
    stroke: currentColor;
  }

  .workflow-title {
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--text-primary);
    margin: 0;
    background: linear-gradient(135deg, var(--accent-color), var(--accent-hover));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .workflow-content {
    min-height: 400px;
  }

  .loading-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 300px;
    gap: 1rem;
  }

  .loading-spinner {
    width: 40px;
    height: 40px;
    border: 3px solid var(--border-color);
    border-top: 3px solid var(--accent-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .loading-container p {
    color: var(--text-secondary);
    font-size: 1.1rem;
  }

  .error-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 300px;
    gap: 1rem;
    text-align: center;
    padding: 2rem;
    background: var(--bg-secondary);
    border-radius: 16px;
    border: 1px solid var(--border-color);
  }

  .error-icon {
    font-size: 3rem;
  }

  .error-container h3 {
    font-size: 1.5rem;
    color: var(--text-primary);
    margin: 0;
  }

  .error-message {
    color: #d32f2f;
    font-weight: 500;
    margin: 0;
  }

  .retry-link {
    color: var(--accent-color);
    text-decoration: none;
    font-weight: 500;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--accent-color);
    border-radius: 8px;
    transition: all 0.2s ease;
    margin-top: 1rem;
  }

  .retry-link:hover {
    background: var(--accent-color);
    color: white;
  }

  .two-column-layout {
    display: grid;
    grid-template-columns: minmax(400px, 500px) 1fr;
    gap: 2rem;
    align-items: start;
    overflow-x: hidden;
    width: 100%;
  }

  .left-column {
    position: sticky;
    top: 2rem;
  }

  .right-column {
    min-height: 600px;
  }

  .workflow-container {
    background: var(--bg-secondary);
    border-radius: 16px;
    padding: 2rem;
    border: 1px solid var(--border-color);
    box-shadow: 0 4px 12px var(--shadow-light);
  }

  .results-container {
    background: var(--bg-secondary);
    border-radius: 16px;
    padding: 2rem;
    border: 1px solid var(--border-color);
    box-shadow: 0 4px 12px var(--shadow-light);
    min-height: 400px;
    display: flex;
    flex-direction: column;
    overflow-x: hidden;
    width: 100%;
    box-sizing: border-box;
  }

  .execution-result {
    flex: 1;
  }

  .execution-result h3 {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0 0 1rem 0;
  }

  .execution-result pre {
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 1rem;
    overflow-x: auto;
    overflow-wrap: break-word;
    word-wrap: break-word;
    white-space: pre-wrap;
    font-size: 0.875rem;
    color: var(--text-primary);
    margin: 0;
    max-width: 100%;
  }

  .execution-error {
    background: #fee;
    border: 1px solid #f44336;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
  }

  .execution-error h3 {
    color: #d32f2f;
    margin: 0 0 0.5rem 0;
    font-size: 1.1rem;
  }

  .execution-error p {
    color: #d32f2f;
    margin: 0;
  }

  .no-results {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    color: var(--text-secondary);
  }

  .no-results-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
    opacity: 0.5;
  }

  .no-results h3 {
    font-size: 1.25rem;
    font-weight: 500;
    margin: 0 0 0.5rem 0;
  }

  .no-results p {
    margin: 0;
    font-size: 0.9rem;
  }

  /* Tablet and mobile responsive adjustments */
  @media (max-width: 1024px) {
    .workflow-page {
      padding: 1.5rem;
    }

    .workflow-title {
      font-size: 2rem;
    }

    .two-column-layout {
      gap: 1.5rem;
    }
  }

  @media (max-width: 768px) {
    .workflow-page {
      padding: 1rem;
    }

    .workflow-title {
      font-size: 1.75rem;
    }

    .two-column-layout {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .left-column {
      position: static;
    }

    .workflow-container {
      padding: 1.5rem;
    }

    .results-container {
      padding: 1.5rem;
      min-height: 300px;
    }
  }

  @media (max-width: 480px) {
    .workflow-title {
      font-size: 1.5rem;
    }

    .workflow-container {
      padding: 1rem;
    }

    .results-container {
      padding: 1rem;
    }

    .execution-result pre {
      font-size: 0.8rem;
      padding: 0.75rem;
    }

    .no-results-icon {
      font-size: 2.5rem;
    }
  }
</style>
