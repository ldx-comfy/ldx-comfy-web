---
export const prerender = false;

import AdminLayout from '../../layouts/AdminLayout.astro';
import { requireRolesSSR } from '../../lib/auth/guard';
import { getWorkflowList, uploadWorkflow, deleteWorkflow } from '../../api/workflows';

// Guard: require admin role
const cookieHeader = Astro.request.headers.get('cookie');
const guard = await requireRolesSSR(Astro.request.url, cookieHeader, { any: ['admin'] });
if (guard.response) {
  // 403 or redirect to login
  return guard.response;
}
const me = guard.me!;

// Fetch workflow list
let workflowList: string[] = [];
let workflowError: string | null = null;
try {
  workflowList = await getWorkflowList({ cookies: cookieHeader || undefined });
} catch (e: any) {
  workflowError = e?.message || 'Failed to fetch workflow list';
}
---

<AdminLayout title="工作流管理">
  <div class="workflow-management">
    <h1>工作流管理</h1>
    <p class="description">管理工作流文件，包括上传新工作流、查看现有工作流和删除不需要的工作流。</p>

    {workflowError ? (
      <div class="error">{workflowError}</div>
    ) : (
      <div class="workflow-container">
        {/* Upload workflow form */}
        <div class="upload-section">
          <h2>上传工作流</h2>
          <form id="upload-form" class="upload-form">
            <div class="form-group">
              <label for="workflow-file">选择工作流文件 (.json)</label>
              <input type="file" id="workflow-file" accept=".json" required />
            </div>
            <button type="submit" class="btn primary">上传</button>
          </form>
          <div id="upload-message" class="message"></div>
        </div>

        {/* Workflow list */}
        <div class="workflow-list-section">
          <h2>工作流列表</h2>
          {workflowList.length > 0 ? (
            <div class="workflow-grid">
              {workflowList.map((workflowId) => (
                <div class="workflow-item" data-workflow-id={workflowId}>
                  <div class="workflow-info">
                    <span class="workflow-id">{workflowId}</span>
                  </div>
                  <div class="workflow-actions">
                    <button class="btn secondary view-btn" data-workflow-id={workflowId}>
                      查看
                    </button>
                    <button class="btn danger delete-btn" data-workflow-id={workflowId}>
                      删除
                    </button>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div class="empty-state">
              <p>暂无工作流</p>
              <p class="empty-hint">点击上方"上传工作流"按钮来添加第一个工作流</p>
            </div>
          )}
        </div>
      </div>
    )}
  </div>
</AdminLayout>

<style>
  .workflow-management {
    max-width: 1200px;
    margin: 0 auto;
  }

  .workflow-management h1 {
    color: var(--text-primary);
    font-size: 2rem;
    margin-bottom: 0.5rem;
  }

  .description {
    color: var(--text-secondary);
    margin-bottom: 2rem;
    font-size: 1.1rem;
  }

  .workflow-container {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .upload-section,
  .workflow-list-section {
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 12px;
    padding: 2rem;
  }

  .upload-section h2,
  .workflow-list-section h2 {
    color: var(--text-primary);
    font-size: 1.5rem;
    margin-bottom: 1.5rem;
    margin-top: 0;
  }

  .upload-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    max-width: 500px;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-group label {
    font-weight: 500;
    color: var(--text-primary);
  }

  .form-group input[type="file"] {
    padding: 0.75rem;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    background: var(--bg-primary);
    color: var(--text-primary);
    transition: border-color 0.2s ease;
  }

  .form-group input[type="file"]:focus {
    outline: none;
    border-color: var(--accent-color);
  }

  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 500;
    transition: all 0.2s ease;
    cursor: pointer;
    border: 1px solid transparent;
  }

  .btn.primary {
    background: var(--accent-color);
    color: white;
  }

  .btn.primary:hover {
    background: var(--accent-hover);
  }

  .btn.secondary {
    background: transparent;
    color: var(--accent-color);
    border-color: var(--accent-color);
  }

  .btn.secondary:hover {
    background: rgba(59, 130, 246, 0.1);
  }

  .btn.danger {
    background: #dc3545;
    color: white;
  }

  .btn.danger:hover {
    background: #c82333;
  }

  .workflow-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
  }

  .workflow-item {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    padding: 1.5rem;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    background: var(--bg-primary);
    transition: all 0.2s ease;
  }

  .workflow-item:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    border-color: var(--accent-color);
  }

  .workflow-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .workflow-id {
    font-weight: 600;
    color: var(--text-primary);
    font-size: 1.1rem;
  }


  .workflow-actions {
    display: flex;
    gap: 0.5rem;
  }

  .workflow-actions .btn {
    flex: 1;
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
  }

  .empty-state {
    text-align: center;
    padding: 3rem 2rem;
    color: var(--text-secondary);
  }

  .empty-state p {
    margin: 0.5rem 0;
    font-size: 1.1rem;
  }

  .empty-hint {
    font-size: 0.9rem !important;
    opacity: 0.7;
  }

  .message {
    margin-top: 1rem;
    padding: 1rem;
    border-radius: 8px;
    font-weight: 500;
  }

  .message.success {
    background: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }

  .message.error {
    background: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }

  .error {
    background: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .workflow-management {
      padding: 0;
    }

    .workflow-container {
      gap: 1.5rem;
    }

    .upload-section,
    .workflow-list-section {
      padding: 1.5rem;
    }

    .workflow-grid {
      grid-template-columns: 1fr;
    }

    .workflow-info {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }

    .workflow-actions {
      flex-direction: column;
    }

    .workflow-actions .btn {
      width: 100%;
    }
  }

  @media (max-width: 480px) {
    .upload-section,
    .workflow-list-section {
      padding: 1rem;
    }

    .workflow-item {
      padding: 1rem;
    }
  }
</style>

<script>
  // Import the required functions directly in the client script
  import { uploadWorkflow, deleteWorkflow } from '../../api/workflows';

  // Helper functions
  function showNotification(message: string, type: 'success' | 'error' | 'warning' | 'info' = 'info') {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
      <span class="notification-message">${message}</span>
      <button class="notification-close">&times;</button>
    `;

    // Add to page
    document.body.appendChild(notification);

    // Show animation
    setTimeout(() => notification.classList.add('show'), 10);

    // Auto close
    const autoClose = setTimeout(() => {
      hideNotification(notification);
    }, 5000);

    // Click close
    const closeBtn = notification.querySelector('.notification-close');
    closeBtn?.addEventListener('click', () => {
      clearTimeout(autoClose);
      hideNotification(notification);
    });
  }

  function hideNotification(notification: HTMLElement) {
    notification.classList.remove('show');
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 300);
  }

  // Handle workflow upload
  document.getElementById('upload-form')?.addEventListener('submit', async function(e: Event) {
    e.preventDefault();

    const fileInput = document.getElementById('workflow-file') as HTMLInputElement | null;
    const messageDiv = document.getElementById('upload-message') as HTMLDivElement | null;

    if (!fileInput || !fileInput.files || !fileInput.files.length) {
      if (messageDiv) {
        messageDiv.textContent = '请选择一个文件';
        messageDiv.className = 'message error';
      }
      return;
    }

    const file = fileInput.files[0];

    try {
      // Call the uploadWorkflow API function
      const result = await uploadWorkflow(file);

      // Show success message
      if (messageDiv) {
        messageDiv.textContent = result.message;
        messageDiv.className = 'message success';
      }

      // Clear the file input
      fileInput.value = '';

      // Refresh the page to show the updated workflow list
      setTimeout(() => {
        location.reload();
      }, 1500);
    } catch (error: unknown) {
      // Show error message
      if (messageDiv) {
        const errorMessage = error instanceof Error ? error.message : '上传失败';
        messageDiv.textContent = errorMessage;
        messageDiv.className = 'message error';
      }
    }
  });

  // Handle workflow deletion
  document.querySelectorAll('.delete-btn').forEach(button => {
    button.addEventListener('click', async function(this: HTMLButtonElement) {
      const workflowId = this.getAttribute('data-workflow-id');
      const workflowItem = this.closest('.workflow-item');

      if (!workflowId) {
        showNotification('工作流ID缺失', 'error');
        return;
      }

      // Confirm deletion
      if (!confirm(`确定要删除工作流 "${workflowId}" 吗？`)) {
        return;
      }

      try {
        // Call the deleteWorkflow API function
        const result = await deleteWorkflow(workflowId);

        // Show success message
        showNotification(result.message, 'success');

        // Remove the workflow item from the list
        if (workflowItem) {
          workflowItem.remove();
        }
      } catch (error: unknown) {
        // Show error message
        const errorMessage = error instanceof Error ? error.message : '删除失败';
        showNotification(`删除失败: ${errorMessage}`, 'error');
      }
    });
  });

  // Handle workflow view - redirect to /wfs/(wfs_id)
  document.querySelectorAll('.view-btn').forEach(button => {
    button.addEventListener('click', function(this: HTMLButtonElement) {
      const workflowId = this.getAttribute('data-workflow-id');
      if (workflowId) {
        window.location.href = `/wfs/${workflowId}`;
      }
    });
  });
</script>