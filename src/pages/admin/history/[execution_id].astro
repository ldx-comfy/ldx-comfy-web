---
export const prerender = false;

import Layout from '../../../layouts/Layout.astro';
import { getTranslator } from '@gudupao/astro-i18n';
import { requireRolesSSR } from '../../../lib/auth/guard';
import { getAnyUserGenerationHistoryDetail } from '../../../api/workflows';
import { toBackendAbsoluteUrl } from '../../../lib/api/client';

import CanCmp from '../../../components/Can.astro';

// i18n
const lang = Astro.params.lang || Astro.cookies.get('lang')?.value || 'en';
const t = getTranslator(lang);

// Guard: require admin role
const cookieHeader = Astro.request.headers.get('cookie');
const guard = await requireRolesSSR(Astro.request.url, cookieHeader, { any: ['admin'] });
if (guard.response) {
  // 403 or redirect to login
  return guard.response;
}
const me = guard.me!;

// Get execution ID from URL parameters
const { execution_id } = Astro.params;

// Fetch user generation history detail
let historyDetail: Record<string, any> | null = null;
let error: { message?: string } | null = null;
try {
  historyDetail = await getAnyUserGenerationHistoryDetail(execution_id as string, { cookies: cookieHeader || undefined });
} catch (err: any) {
  console.error('Failed to fetch history detail:', err);
  error = { message: err.message || 'Unknown error' };
}
---

<Layout title={t('history.detail.title')}>
  <div class="history-detail-page">
    <h1 class="title">{t('history.detail.title')}</h1>
    
    {error ? (
      <div class="error-section">
        <h2>{t('history.detail.error')}</h2>
        <p>{error.message || t('history.detail.errorMessage')}</p>
        <a class="btn" href="/admin">{t('history.detail.backToHistory')}</a>
      </div>
    ) : historyDetail ? (
      <div class="detail-section">
        <div class="card">
          <h2>{t('history.detail.information')}</h2>
          <div class="info-grid">
            <div class="info-item">
              <strong>{t('history.detail.executionId')}:</strong>
              <span>{historyDetail.execution_id}</span>
            </div>
            <div class="info-item">
              <strong>{t('history.detail.workflowId')}:</strong>
              <span>{historyDetail.workflow_id}</span>
            </div>
            <div class="info-item">
              <strong>{t('history.detail.timestamp')}:</strong>
              <span>{new Date(historyDetail.timestamp * 1000).toLocaleString(lang)}</span>
            </div>
            <div class="info-item">
              <strong>{t('history.detail.userId')}:</strong>
              <span>{historyDetail.user_id}</span>
            </div>
          </div>
        </div>
        
        <div class="card">
          <h2>{t('history.detail.inputParameters')}</h2>
          {historyDetail.input_params ? (
            <div class="input-params-table">
              <table>
                <thead>
                  <tr>
                    <th>{t('history.detail.key')}</th>
                    <th>{t('history.detail.value')}</th>
                  </tr>
                </thead>
                <tbody>
                  {
                    Object.entries(historyDetail.input_params).map(([key, value]) => {
                      return <tr>
                        <td>{key}</td>
                        <td>
                          {typeof value === 'object' ?
                          <pre class="json">{JSON.stringify(value, null, 2)}</pre> :
                          String(value)}
                        </td>
                      </tr>;
                    })
                  }
                </tbody>
              </table>
            </div>
          ) : (
            <p>{t('history.detail.noInputParameters')}</p>
          )}
        </div>
        
        <div class="card">
          <h2>{t('history.detail.result')}</h2>
          {historyDetail.result && historyDetail.result.images && historyDetail.result.images.length > 0 ? (
            <div class="images-grid">
              {historyDetail.result.images.map((image: string, index: number) => {
                // Handle both base64 data URLs and file paths
                let imageUrl = null;
                if (image) {
                  if (image.startsWith('data:')) {
                    // Base64 data URL
                    imageUrl = image;
                  } else if (image.startsWith('/comfy_out_image/')) {
                    // File path with prefix
                    imageUrl = toBackendAbsoluteUrl(image);
                  } else {
                    // File path without prefix
                    imageUrl = toBackendAbsoluteUrl(`/comfy_out_image/${image}`);
                  }
                }
                
                // Extract prompt from input_params
                let prompt = '';
                // Extract other parameters like steps, cfg_scale, etc.
                let steps = '';
                let cfgScale = '';
                
                if (historyDetail.input_params && historyDetail.input_params.nodes) {
                  const nodes = historyDetail.input_params.nodes;
                  // Find the node with text input
                  const textNode = nodes.find((node: any) => node.class_type === 'Text' || (node.class_type && node.class_type.includes('CLIPTextEncode')));
                  if (textNode && textNode.value && textNode.value.text) {
                    prompt = textNode.value.text;
                  }
                  
                  // Find other parameters
                  // This is a simplified example. You might need to adjust this based on the actual structure of your data.
                  const stepsNode = nodes.find((node: any) => node.title === 'Steps');
                  if (stepsNode && stepsNode.value) {
                    steps = stepsNode.value;
                  }
                  
                  const cfgScaleNode = nodes.find((node: any) => node.title === 'CFG Scale');
                  if (cfgScaleNode && cfgScaleNode.value) {
                    cfgScale = cfgScaleNode.value;
                  }
                }
                
                return (
                  <div class="image-result-container">
                    <div class="image-container">
                      {imageUrl ? (
                        <img
                          src={imageUrl}
                          alt={`${t('history.detail.outputImage')} ${index + 1}`}
                          class="detail-image"
                        />
                      ) : (
                        <div class="no-image">{t('history.noImage')}</div>
                      )}
                    </div>
                    <div class="details-container">
                      {prompt && (
                        <div class="detail-item">
                          <strong>{t('history.detail.prompt')}:</strong>
                          <div class="prompt-box">{prompt}</div>
                        </div>
                      )}
                      {(steps || cfgScale) && (
                        <div class="detail-item">
                          <strong>{t('history.detail.parameters')}:</strong>
                          <div class="parameters-box">
                            {steps && <div>{t('history.detail.steps')}: {steps}</div>}
                            {cfgScale && <div>{t('history.detail.cfgScale')}: {cfgScale}</div>}
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                );
              })}
            </div>
          ) : (
            <p>{t('history.noImages')}</p>
          )}
        </div>
        
        <div class="actions">
          <a class="btn" href="/admin">{t('history.detail.backToHistory')}</a>
        </div>
      </div>
    ) : (
      <div class="loading-section">
        <p>{t('history.detail.loading')}</p>
      </div>
    )}
  </div>
</Layout>

{/* Preview Modal */}
<div id="preview-modal" class="preview-modal" style="display:none;">
  <span class="close">&times;</span>
  <img class="preview-modal-content" id="preview-image" />
</div>

<script>
  {/* Client-side script to handle image preview */}
  {/* This script runs after the page is hydrated */}
  document.addEventListener('DOMContentLoaded', () => {
    // Add click event listeners to all detail images
    const images = document.querySelectorAll('.detail-image');
    images.forEach(img => {
      img.addEventListener('click', (e) => {
        const target = e.target as HTMLImageElement;
        const src = target.src;
        
        if (src) {
          // Set the source of the preview image
          const previewImage = document.getElementById('preview-image') as HTMLImageElement;
          if (previewImage) {
            previewImage.src = src;
          }
          
          // Show the preview modal
          const modal = document.getElementById('preview-modal');
          if (modal) {
            modal.style.display = 'block';
          }
        }
      });
    });
    
    // Add click event listener to close the modal when clicking on the close button or outside the image
    const modal = document.getElementById('preview-modal');
    if (modal) {
      modal.addEventListener('click', (e) => {
        if (e.target === modal || (e.target as HTMLElement).classList.contains('close')) {
          modal.style.display = 'none';
        }
      });
    }
  });
</script>

<style>
  .history-detail-page {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }
  .title {
    margin: 0 8px 0;
    font-size: 24px;
    color: var(--text-primary);
  }
  .card {
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 12px;
    padding: 16px;
  }
  .info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 12px;
  }
  .info-item {
    display: flex;
    flex-direction: column;
    gap: 4px;
  }
  .info-item strong {
    color: var(--text-primary);
  }
  .info-item span {
    color: var(--text-secondary);
  }
  .json {
    margin: 0;
    white-space: pre-wrap;
    word-break: break-word;
    color: var(--text-primary);
    font-size: 0.9rem;
    background: var(--bg-primary);
    padding: 12px;
    border-radius: 8px;
    overflow-x: auto;
  }
  .input-params-table {
    width: 100%;
    border-collapse: collapse;
  }
  .input-params-table th,
  .input-params-table td {
    text-align: left;
    padding: 8px;
    border-bottom: 1px solid var(--border-color);
  }
  .input-params-table th {
    background-color: var(--bg-primary);
    font-weight: bold;
  }
  .images-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 30px;
  }
  .image-result-container {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }
  .image-container {
    width: 100%;
    height: 300px;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    border-radius: 8px;
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
  }
  .detail-image {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
  }
  .details-container {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }
  .detail-item {
    display: flex;
    flex-direction: column;
    gap: 5px;
  }
  .detail-item strong {
    color: var(--text-primary);
    font-weight: 600;
  }
  .prompt-box {
    padding: 12px;
    background-color: var(--bg-primary);
    border-radius: 6px;
    border: 1px solid var(--border-color);
    font-size: 0.9rem;
    color: var(--text-primary);
    word-break: break-word;
    white-space: pre-wrap;
    max-height: 150px;
    overflow-y: auto;
  }
  .parameters-box {
    padding: 12px;
    background-color: var(--bg-primary);
    border-radius: 6px;
    border: 1px solid var(--border-color);
    font-size: 0.9rem;
    color: var(--text-primary);
  }
  .parameters-box > div {
    margin-bottom: 5px;
  }
  .parameters-box > div:last-child {
    margin-bottom: 0;
  }
  .no-image {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text-secondary);
    font-style: italic;
  }
  .actions {
    display: flex;
    gap: 10px;
 }
  .btn {
    display: inline-block;
    padding: 10px 12px;
    border-radius: 8px;
    text-decoration: none;
    background: var(--accent-color);
    color: #fff;
    border: 1px solid var(--accent-color);
  }
  .btn.secondary {
    background: transparent;
    color: var(--accent-color);
  }
  .loading-section, .error-section {
    text-align: center;
    padding: 40px 20px;
  }
  .error-section p {
    color: var(--error-color);
    margin-bottom: 20px;
  }
  
  /* Preview Modal Styles */
  .preview-modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.9);
  }
  
  .preview-modal-content {
    margin: auto;
    display: block;
    width: 80%;
    max-width: 700px;
    max-height: 80%;
    object-fit: contain;
    animation-name: zoom;
    animation-duration: 0.3s;
  }
  
  @keyframes zoom {
    from {transform: scale(0)}
    to {transform: scale(1)}
  }
  
  .close {
    position: absolute;
    top: 15px;
    right: 35px;
    color: #f1f1f1;
    font-size: 40px;
    font-weight: bold;
    cursor: pointer;
  }
  
  .close:hover,
  .close:focus {
    color: #bbb;
  }
</style>