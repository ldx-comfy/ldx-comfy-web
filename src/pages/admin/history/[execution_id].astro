---
export const prerender = false;

import Layout from '../../../layouts/Layout.astro';
import { requireRolesSSR } from '../../../lib/auth/guard';
import { getAnyUserGenerationHistoryDetail } from '../../../api/workflows';
import { toBackendAbsoluteUrl } from '../../../lib/api/client';

import CanCmp from '../../../components/Can.astro';

// Guard: require admin role
const cookieHeader = Astro.request.headers.get('cookie');
const guard = await requireRolesSSR(Astro.request.url, cookieHeader, { any: ['admin'] });
if (guard.response) {
  // 403 or redirect to login
  return guard.response;
}
const me = guard.me!;

// Get execution ID from URL parameters
const { execution_id } = Astro.params;

// Fetch user generation history detail
let historyDetail: Record<string, any> | null = null;
let error: { message?: string } | null = null;
try {
  historyDetail = await getAnyUserGenerationHistoryDetail(execution_id as string, { cookies: cookieHeader || undefined });
} catch (err: any) {
  console.error('Failed to fetch history detail:', err);
  error = { message: err.message || 'Unknown error' };
}

if (historyDetail && historyDetail.result && historyDetail.result.images) {
  // Debug: log the entire historyDetail structure
  console.log('History Detail:', JSON.stringify(historyDetail, null, 2));
  
  // Extract prompt from Text node
  let prompt = '';
  // Extract refine quality from Switch any [Crystools] node
  let refineQuality = false;
  
  // Debug: log the entire historyDetail structure
  console.log('History Detail:', JSON.stringify(historyDetail, null, 2));
  
  // Try to extract prompt from result or other locations
  if (historyDetail.result && historyDetail.result.prompt) {
    prompt = historyDetail.result.prompt;
    console.log('Prompt from result:', prompt);
  }
  
  // Extract from input_params.nodes if available
  if (historyDetail.input_params && historyDetail.input_params.nodes) {
    const nodes = historyDetail.input_params.nodes;
    console.log('Nodes:', nodes);
    Object.values(nodes).forEach((node: any) => {
      if (node.class_type && typeof node.class_type === 'string') {
        console.log('Node class_type:', node.class_type);
        // Extract prompt from Text node
        if (node.class_type.includes('Text')) {
          console.log('Text node value:', node.value);
          console.log('Text node value type:', typeof node.value);
          if (node.value && node.value.text !== undefined) {
            prompt = node.value.text;
            console.log('Extracted prompt:', prompt);
          } else {
            console.log('Text node value.text is undefined or null');
            // If node.value exists but node.value.text doesn't, try using node.value directly
            if (node.value && typeof node.value === 'string') {
              prompt = node.value;
              console.log('Extracted prompt from node.value directly:', prompt);
            }
          }
        }
        // Extract refine quality from Switch any [Crystools] node
        if (node.class_type === 'Switch any [Crystools]') {
          console.log('Switch node value:', node.value);
          if (node.value !== undefined) {
            refineQuality = !!node.value;
            console.log('Extracted refineQuality:', refineQuality);
          }
        }
      }
    });
  }
  
  // Extract other parameters
  const steps = historyDetail.result.steps || '';
  const cfgScale = historyDetail.result.cfg_scale || historyDetail.result.cfg || '';
  
  // Process images with prompt information
  historyDetail.result.images = historyDetail.result.images.map((img: string) => {
    // Extract original image if available
    let originalImageBase64 = '';
    if (historyDetail && historyDetail.input_params && historyDetail.input_params.nodes) {
      const nodes = historyDetail.input_params.nodes;
      const loadImageNode = nodes.find((node: any) => node.class_type === 'LoadImageOutput' && node.value && node.value.startsWith('data:image'));
      if (loadImageNode && loadImageNode.value) {
        originalImageBase64 = loadImageNode.value;
      }
    }
    
    return {
      src: img,
      refineQuality,
      originalImageSrc: originalImageBase64,
      prompt,
      steps,
      cfgScale
    };
  });
}
---

<Layout title="历史记录详情">
  <div class="history-detail-page">
    <h1 class="title">历史记录详情</h1>
    
    {error ? (
      <div class="error-section">
        <h2>错误</h2>
        <p>{error.message || '获取历史记录详情时发生错误'}</p>
        <a class="btn" href="/admin">返回历史记录</a>
      </div>
    ) : historyDetail ? (
      <div class="detail-section">
        <div class="card">
          <h2>信息</h2>
          <div class="info-grid">
            <div class="info-item">
              <strong>执行 ID:</strong>
              <span>{historyDetail.execution_id}</span>
            </div>
            <div class="info-item">
              <strong>工作流 ID:</strong>
              <span>{historyDetail.workflow_id}</span>
            </div>
            <div class="info-item">
              <strong>时间戳:</strong>
              <span>{new Date(historyDetail.timestamp * 1000).toLocaleString('zh-CN')}</span>
            </div>
            <div class="info-item">
              <strong>用户 ID:</strong>
              <span>{historyDetail.user_id}</span>
            </div>
          </div>
        </div>
        
        
        <div class="card">
          <h2>结果</h2>
          {historyDetail.result && historyDetail.result.images && historyDetail.result.images.length > 0 ? (
            <div class="images-grid">
              {historyDetail.result.images.map((image: { src: string; refineQuality: boolean; originalImageSrc?: string; prompt: string; steps: string; cfgScale: string }, index: number) => {
                let imageUrl = null;
                if (image.src) {
                  if (image.src.startsWith('data:')) {
                    imageUrl = image.src;
                  } else if (image.src.startsWith('/comfy_out_image/')) {
                    imageUrl = toBackendAbsoluteUrl(image.src);
                  } else {
                    imageUrl = toBackendAbsoluteUrl(`/comfy_out_image/${image.src}`);
                  }
                }

                // These variables are now part of the 'image' object due to preprocessing in the --- block
                const { prompt, steps, cfgScale, refineQuality, originalImageSrc } = image;

                // Debug: log prompt values
                console.log('Prompt values:', { prompt });


                return (
                  <div class="image-result-container">
                    <div class="image-container">
                      {imageUrl ? (
                        <img
                          src={imageUrl}
                          alt={`输出图片 ${index + 1} - ${prompt || '无提示词'}`}
                          class="detail-image"
                        />
                      ) : (
                        <div class="no-image">无图片</div>
                      )}
                    </div>
                    <div class="details-container">
                      {originalImageSrc && (
                        <div class="detail-item new-detail-item">
                          <strong>原图:</strong>
                          <div class="original-image-box">
                            <img src={originalImageSrc} alt="原图" class="original-image" />
                          </div>
                        </div>
                      )}
                      <div class="detail-item new-detail-item">
                        <strong>提示词:</strong>
                        <div class="prompt-box">{prompt || '（空）'}</div>
                      </div>
                      {(steps || cfgScale) && (
                        <div class="detail-item new-detail-item">
                          <strong>参数:</strong>
                          <div class="parameters-box">
                            {steps && <div>步数: {steps}</div>}
                            {cfgScale && <div>CFG比例: {cfgScale}</div>}
                          </div>
                        </div>
                      )}
                      <div class="detail-item new-detail-item">
                        <strong>调整画质:</strong>
                        <span>{refineQuality ? '是' : '否'}</span>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          ) : (
            <p>无图片</p>
          )}
        </div>
        
        <div class="actions">
          <a class="btn" href="/admin">返回历史记录</a>
        </div>
      </div>
    ) : (
      <div class="loading-section">
        <p>正在加载历史记录详情...</p>
      </div>
    )}
  </div>
</Layout>

{/* Preview Modal */}
<div id="preview-modal" class="preview-modal" style="display:none;">
  <span class="close">&times;</span>
  <img class="preview-modal-content" id="preview-image" />
</div>

<script>
  {/* Client-side script to handle image preview */}
  {/* This script runs after the page is hydrated */}
  document.addEventListener('DOMContentLoaded', () => {
    // Add click event listeners to all detail images
    const images = document.querySelectorAll('.detail-image');
    images.forEach(img => {
      img.addEventListener('click', (e) => {
        const target = e.target as HTMLImageElement;
        const src = target.src;
        
        if (src) {
          // Set the source of the preview image
          const previewImage = document.getElementById('preview-image') as HTMLImageElement;
          if (previewImage) {
            previewImage.src = src;
          }
          
          // Show the preview modal
          const modal = document.getElementById('preview-modal');
          if (modal) {
            modal.style.display = 'block';
          }
        }
      });
    });
    
    // Add click event listener to close the modal when clicking on the close button or outside the image
    const modal = document.getElementById('preview-modal');
    if (modal) {
      modal.addEventListener('click', (e) => {
        if (e.target === modal || (e.target as HTMLElement).classList.contains('close')) {
          modal.style.display = 'none';
        }
      });
    }
  });
</script>

<style>
  .history-detail-page {
    display: flex;
    flex-direction: column;
    gap: 20px;
    padding: 20px;
    max-width: 1200px;
    margin: 0 auto;
  }
  .title {
    margin: 0;
    font-size: 28px;
    color: var(--text-primary);
    text-align: center;
    padding-bottom: 10px;
    border-bottom: 2px solid var(--accent-color);
  }
  .card {
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 12px;
    padding: 16px;
  }
  .info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 12px;
  }
  .info-item {
    display: flex;
    flex-direction: column;
    gap: 4px;
  }
  .info-item strong {
    color: var(--text-primary);
  }
  .info-item span {
    color: var(--text-secondary);
  }
  .json {
    margin: 0;
    white-space: pre-wrap;
    word-break: break-word;
    color: var(--text-primary);
    font-size: 0.9rem;
    background: var(--bg-primary);
    padding: 16px;
    border-radius: 10px;
    overflow-x: auto;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }
  .input-params-table {
    width: 100%;
    border-collapse: collapse;
  }
  .input-params-table th,
  .input-params-table td {
    text-align: left;
    padding: 12px;
    border-bottom: 1px solid var(--border-color);
  }
  .input-params-table th {
    background-color: var(--bg-primary);
    font-weight: bold;
  }
  .images-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 35px;
  }
  .image-result-container {
    display: flex;
    flex-direction: column;
    gap: 20px;
    background: var(--bg-secondary);
    border-radius: 16px;
    padding: 20px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  .image-container {
    width: 100%;
    height: 350px;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    border-radius: 12px;
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
  }
  .detail-image {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
    cursor: pointer;
    transition: transform 0.2s;
  }
  .detail-image:hover {
    transform: scale(1.02);
  }
  .details-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
  }
  .detail-item {
    display: flex;
    flex-direction: column;
    gap: 8px;
    padding: 16px;
    background: var(--bg-primary);
    border-radius: 12px;
    border: 1px solid var(--border-color);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }
  .detail-item strong {
    color: var(--text-primary);
    font-weight: 600;
    font-size: 16px;
  }
  .prompt-box {
    padding: 12px;
    background-color: var(--bg-secondary);
    border-radius: 8px;
    border: 1px solid var(--border-color);
    font-size: 15px;
    color: var(--text-primary);
    word-break: break-word;
    white-space: pre-wrap;
    max-height: 150px;
    overflow-y: auto;
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);
  }
  .prompt-entry {
    margin-bottom: 12px;
    padding-bottom: 12px;
    border-bottom: 1px solid var(--border-color);
  }
  .prompt-entry:last-child {
    margin-bottom: 0;
    padding-bottom: 0;
    border-bottom: none;
  }
  .parameters-box {
    padding: 12px;
    background-color: var(--bg-secondary);
    border-radius: 8px;
    border: 1px solid var(--border-color);
    font-size: 15px;
    color: var(--text-primary);
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);
  }
  .parameters-box > div {
    margin-bottom: 8px;
    padding: 8px;
    background: var(--bg-primary);
    border-radius: 6px;
  }
  .parameters-box > div:last-child {
    margin-bottom: 0;
  }
  .no-image {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text-secondary);
    font-style: italic;
    font-size: 18px;
  }
  .actions {
    display: flex;
    justify-content: center;
    gap: 15px;
    padding: 20px 0;
  }
  .btn {
    display: inline-block;
    padding: 12px 20px;
    border-radius: 10px;
    text-decoration: none;
    background: var(--accent-color);
    color: #fff;
    border: 1px solid var(--accent-color);
    font-size: 16px;
    font-weight: 500;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  .btn:hover {
    background: var(--accent-color-dark);
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }
  .btn.secondary {
    background: transparent;
    color: var(--accent-color);
  }
  .btn.secondary:hover {
    background: rgba(var(--accent-color-rgb), 0.1);
  }
  .loading-section, .error-section {
    text-align: center;
    padding: 50px 20px;
  }
  .error-section p {
    color: var(--error-color);
    margin-bottom: 25px;
    font-size: 18px;
  }
  
  /* Preview Modal Styles */
  .preview-modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0.9);
  }
  
  .preview-modal-content {
    margin: auto;
    display: block;
    width: 90%;
    max-width: 900px;
    max-height: 90%;
    object-fit: contain;
    animation-name: zoom;
    animation-duration: 0.3s;
    border-radius: 10px;
  }
  
  @keyframes zoom {
    from {transform: scale(0)}
    to {transform: scale(1)}
  }
  
  .close {
    position: absolute;
    top: 20px;
    right: 40px;
    color: #f1f1f1;
    font-size: 50px;
    font-weight: bold;
    cursor: pointer;
    transition: color 0.3s;
  }
  
  .close:hover,
  .close:focus {
    color: #bbb;
  }

  .new-detail-item {
    margin-top: 0;
  }

  .original-image-box {
    width: 100%;
    height: 200px;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    border-radius: 10px;
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .original-image {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
  }
  
  /* Responsive design */
  @media (max-width: 768px) {
    .history-detail-page {
      padding: 15px;
    }
    .title {
      font-size: 24px;
    }
    .card {
      padding: 15px;
    }
    .info-grid {
      grid-template-columns: 1fr;
    }
    .images-grid {
      grid-template-columns: 1fr;
    }
    .details-container {
      grid-template-columns: 1fr;
    }
    .actions {
      flex-direction: column;
      align-items: center;
    }
    .btn {
      width: 100%;
      text-align: center;
    }
  }
</style>