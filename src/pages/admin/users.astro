---
export const prerender = false;

import Layout from '../../layouts/AdminLayout.astro';
import { requireRolesSSR } from '../../lib/auth/guard';
import { getAllUsers, updateUserRole, updateUserStatus } from '../../api/workflows';

// Guard: require admin role
const cookieHeader = Astro.request.headers.get('cookie');
const guard = await requireRolesSSR(Astro.request.url, cookieHeader, { any: ['admin'] });
if (guard.response) {
  // 403 or redirect to login
  return guard.response;
}
const me = guard.me!;

// Fetch all users
let allUsers: any[] = [];
let usersError: string | null = null;
try {
  allUsers = await getAllUsers({ cookies: cookieHeader || undefined });
} catch (e: any) {
  usersError = e?.message || 'Failed to fetch users list';
}
---

<Layout title="用户管理">
  <!-- 主内容区域 -->
  <main class="admin-main">
      <div class="users-page">
        <h1 class="page-title">用户管理</h1>
        <p class="page-desc">管理用户账户、角色和权限设置</p>

        {usersError ? (
          <div class="error">{usersError}</div>
        ) : (
          <div class="users-container">
            <div class="users-header">
              <div class="header-left">
                <h3>用户列表</h3>
                <button class="btn primary" id="create-user-btn">创建用户</button>
              </div>
              <div class="search-filter">
                <div class="search-group">
                  <input type="text" id="user-search" placeholder="搜索用户名或邮箱..." class="search-input" />
                  <button class="btn secondary clear-search" id="clear-search">清除</button>
                </div>
                <div class="filter-group">
                  <select id="role-filter" class="filter-select">
                    <option value="">所有角色</option>
                    <option value="admin">管理员</option>
                    <option value="moderator">版主</option>
                    <option value="user">普通用户</option>
                  </select>
                  <select id="status-filter" class="filter-select">
                    <option value="">所有状态</option>
                    <option value="active">活跃</option>
                    <option value="inactive">未激活</option>
                    <option value="banned">封禁</option>
                  </select>
                  <select id="sort-by" class="filter-select">
                    <option value="username">按用户名排序</option>
                    <option value="created_at">按注册时间</option>
                    <option value="last_login">按最后登录</option>
                    <option value="generation_count">按生成次数</option>
                  </select>
                </div>
              </div>
            </div>

            <div class="users-table-container">
              <table class="users-table">
                <thead>
                  <tr>
                    <th>用户名</th>
                    <th>邮箱</th>
                    <th>角色</th>
                    <th>状态</th>
                    <th>注册时间</th>
                    <th>最后登录</th>
                    <th>生成次数</th>
                    <th>操作</th>
                  </tr>
                </thead>
                <tbody>
                  {allUsers.map((user) => (
                    <tr class="user-row" data-user-id={user.id}>
                      <td>{user.username}</td>
                      <td>{user.email}</td>
                      <td>
                        <select class="role-select" data-user-id={user.id} value={user.role}>
                          <option value="admin">管理员</option>
                          <option value="moderator">版主</option>
                          <option value="user">普通用户</option>
                        </select>
                      </td>
                      <td>
                        <select class="status-select" data-user-id={user.id} value={user.status}>
                          <option value="active">活跃</option>
                          <option value="inactive">未激活</option>
                          <option value="banned">封禁</option>
                        </select>
                      </td>
                      <td>{new Date(user.created_at).toLocaleDateString('zh-CN')}</td>
                      <td>{new Date(user.last_login).toLocaleDateString('zh-CN')}</td>
                      <td>{user.generation_count}</td>
                      <td>
                        <div class="action-buttons">
                          <button class="btn secondary save-user-btn" data-user-id={user.id}>保存</button>
                          <button class="btn warning reset-password-btn" data-user-id={user.id} data-username={user.username}>重置密码</button>
                          <button class="btn danger delete-user-btn" data-user-id={user.id} data-username={user.username}>删除</button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}
      </div>
  </main>
</Layout>

<!-- 创建用户模态框 -->
<div id="create-user-modal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h3>创建新用户</h3>
      <button class="modal-close">&times;</button>
    </div>
    <div class="modal-body">
      <form id="create-user-form">
        <div class="form-group">
          <label for="new-username">用户名 *</label>
          <input type="text" id="new-username" required />
        </div>
        <div class="form-group">
          <label for="new-password">密码 *</label>
          <input type="password" id="new-password" required minlength="6" />
        </div>
        <div class="form-group">
          <label for="new-email">邮箱</label>
          <input type="email" id="new-email" />
        </div>
        <div class="form-group">
          <label for="new-role">角色</label>
          <select id="new-role">
            <option value="user">普通用户</option>
            <option value="moderator">版主</option>
            <option value="admin">管理员</option>
          </select>
        </div>
      </form>
    </div>
    <div class="modal-footer">
      <button class="btn secondary" id="cancel-create">取消</button>
      <button class="btn primary" id="confirm-create">创建</button>
    </div>
  </div>
</div>

<!-- 重置密码模态框 -->
<div id="reset-password-modal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h3>重置密码</h3>
      <button class="modal-close">&times;</button>
    </div>
    <div class="modal-body">
      <p id="reset-password-message"></p>
      <div class="form-group">
        <label for="new-password-input">新密码 *</label>
        <input type="password" id="new-password-input" required minlength="6" />
      </div>
    </div>
    <div class="modal-footer">
      <button class="btn secondary" id="cancel-reset">取消</button>
      <button class="btn primary" id="confirm-reset">重置</button>
    </div>
  </div>
</div>

<!-- 删除用户模态框 -->
<div id="delete-user-modal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h3>删除用户</h3>
      <button class="modal-close">&times;</button>
    </div>
    <div class="modal-body">
      <p id="delete-user-message"></p>
    </div>
    <div class="modal-footer">
      <button class="btn secondary" id="cancel-delete">取消</button>
      <button class="btn danger" id="confirm-delete">删除</button>
    </div>
  </div>
</div>

<style>

  .users-page {
    max-width: 1200px;
    margin: 0 auto;
  }

  .page-title {
    margin: 0 0 8px 0;
    font-size: 28px;
    color: var(--text-primary);
    font-weight: 700;
  }

  .page-desc {
    color: var(--text-secondary);
    margin: 0 0 32px 0;
    font-size: 16px;
  }

  .users-container {
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 12px;
    padding: 24px;
  }

  .users-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 24px;
  }

  .header-left {
    display: flex;
    align-items: center;
    gap: 16px;
  }

  .users-header h3 {
    margin: 0;
    font-size: 20px;
    color: var(--text-primary);
  }

  .search-filter {
    display: flex;
    flex-direction: column;
    gap: 16px;
    min-width: 300px;
  }

  .search-group {
    display: flex;
    gap: 8px;
    align-items: center;
  }

  .search-input {
    flex: 1;
    padding: 10px 12px;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    background: var(--bg-primary);
    color: var(--text-primary);
    font-size: 0.9rem;
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
  }

  .search-input:focus {
    outline: none;
    border-color: var(--accent-color);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .clear-search {
    padding: 10px 16px;
    white-space: nowrap;
  }

  .filter-group {
    display: flex;
    gap: 12px;
    flex-wrap: wrap;
  }

  .filter-select {
    padding: 10px 12px;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    background: var(--bg-primary);
    color: var(--text-primary);
    font-size: 0.9rem;
    min-width: 140px;
    cursor: pointer;
    transition: border-color 0.2s ease;
  }

  .filter-select:focus {
    outline: none;
    border-color: var(--accent-color);
  }

  .filter-select:hover {
    border-color: var(--accent-color);
  }

  .users-table-container {
    overflow-x: auto;
    border: 1px solid var(--border-color);
    border-radius: 8px;
  }

  .users-table {
    width: 100%;
    border-collapse: collapse;
    background: var(--bg-primary);
  }

  .users-table th,
  .users-table td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid var(--border-color);
  }

  .users-table th {
    background: var(--bg-secondary);
    font-weight: 600;
    color: var(--text-primary);
  }

  .users-table tr:hover {
    background: var(--bg-secondary);
  }

  .role-select,
  .status-select {
    padding: 4px 8px;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    background: var(--bg-primary);
    color: var(--text-primary);
  }

  .btn {
    display: inline-block;
    padding: 8px 12px;
    border-radius: 6px;
    text-decoration: none;
    background: var(--accent-color);
    color: #fff;
    border: 1px solid var(--accent-color);
    cursor: pointer;
    font-size: 0.9rem;
    transition: all 0.2s ease;
  }

  .btn.secondary {
    background: transparent;
    color: var(--accent-color);
  }

  .btn:hover {
    opacity: 0.9;
  }

  .error {
    color: #c62828;
    background: #fee;
    border: 1px solid #f44336;
    border-radius: 8px;
    padding: 12px 16px;
    margin-bottom: 20px;
  }

  /* 响应式设计 */
  @media (max-width: 768px) {
    .users-header {
      flex-direction: column;
      gap: 16px;
      align-items: flex-start;
    }

    .search-filter {
      width: 100%;
    }

    .filter-group {
      width: 100%;
    }

    .filter-select {
      flex: 1;
      min-width: 0;
    }

    .users-table-container {
      overflow-x: auto;
    }

    .users-table {
      min-width: 600px;
    }

    .users-table th,
    .users-table td {
      padding: 8px 6px;
      font-size: 0.85rem;
    }

    .modal-content {
      margin: 20px;
      max-width: none;
      width: calc(100% - 40px);
      max-width: 400px;
    }

    .modal-header,
    .modal-body,
    .modal-footer {
      padding: 16px 20px;
    }

    .modal-footer {
      flex-direction: column;
      gap: 8px;
    }

    .modal-footer .btn {
      width: 100%;
    }
  }

  @media (max-width: 480px) {
    .admin-main {
      padding: 16px 12px;
    }

    .page-title {
      font-size: 24px;
    }

    .users-container {
      padding: 16px;
    }

    .search-group {
      flex-direction: column;
      gap: 8px;
    }

    .search-input {
      width: 100%;
    }

    .filter-group {
      flex-direction: column;
      gap: 8px;
    }

    .filter-select {
      width: 100%;
    }

    .modal-content {
      margin: 10px;
      width: calc(100% - 20px);
      max-width: 350px;
    }

    .modal-header,
    .modal-body,
    .modal-footer {
      padding: 12px 16px;
    }

    .modal-header h3 {
      font-size: 1rem;
    }

    .modal-body input,
    .modal-body select {
      padding: 6px 10px;
      font-size: 0.85rem;
    }

    .modal-footer .btn {
      padding: 6px 12px;
      font-size: 0.85rem;
      min-width: 60px;
    }
    }
  
    /* 操作按钮样式 */
    .action-buttons {
      display: flex;
      gap: 8px;
      flex-wrap: wrap;
    }
  
    .action-buttons .btn {
      padding: 6px 12px;
      font-size: 0.85rem;
    }
  
    .btn.warning {
      background: #ffc107;
      color: #212529;
      border-color: #ffc107;
    }
  
    .btn.warning:hover {
      background: #e0a800;
    }
  
    /* 模态框样式 */
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
    }
  
    .modal.show {
      display: flex;
      align-items: center;
      justify-content: center;
    }
  
    .modal-content {
      background: var(--bg-primary);
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
      max-width: 450px;
      width: 95%;
      max-height: 90vh;
      overflow-y: auto;
      overflow-x: hidden;
      box-sizing: border-box;
    }
  
    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 16px 20px;
      border-bottom: 1px solid var(--border-color);
    }
  
    .modal-header h3 {
      margin: 0;
      color: var(--text-primary);
      font-size: 1.1rem;
      word-wrap: break-word;
      overflow-wrap: break-word;
      line-height: 1.3;
    }
  
    .modal-close {
      background: none;
      border: none;
      font-size: 20px;
      cursor: pointer;
      color: var(--text-secondary);
      padding: 4px;
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 4px;
      transition: background-color 0.2s ease;
    }
  
    .modal-close:hover {
      background-color: var(--bg-secondary);
    }
  
    .modal-body {
      padding: 20px;
      word-wrap: break-word;
      overflow-wrap: break-word;
    }
  
    .modal-body p {
      word-wrap: break-word;
      overflow-wrap: break-word;
      margin: 0 0 16px 0;
      line-height: 1.5;
    }
  
    .modal-body .form-group {
      margin-bottom: 16px;
    }
  
    .modal-body .form-group:last-child {
      margin-bottom: 0;
    }
  
    .modal-body label {
      display: block;
      margin-bottom: 6px;
      font-weight: 500;
      color: var(--text-primary);
      font-size: 0.9rem;
    }
  
    .modal-body input,
    .modal-body select {
      width: 100%;
      padding: 8px 12px;
      border: 1px solid var(--border-color);
      border-radius: 6px;
      background: var(--bg-secondary);
      color: var(--text-primary);
      font-size: 0.9rem;
      box-sizing: border-box;
      transition: border-color 0.2s ease;
      min-width: 0; /* 防止flex子项超出容器 */
      word-wrap: break-word;
    }
  
    .modal-body input[type="password"],
    .modal-body input[type="email"],
    .modal-body input[type="text"] {
      max-width: 100%;
    }
  
    .modal-body input:focus,
    .modal-body select:focus {
      outline: none;
      border-color: var(--accent-color);
      box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
    }
  
    .modal-footer {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
      padding: 16px 20px;
      border-top: 1px solid var(--border-color);
    }
  
    .modal-footer .btn {
      min-width: 70px;
      padding: 8px 16px;
      font-size: 0.9rem;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
  </style>

<script>
  // Import the required functions
  import { updateUserRole, updateUserStatus, createUser, deleteUser, resetUserPassword } from '../../api/workflows';

  // 辅助函数
  function showNotification(message: string, type: 'success' | 'error' | 'warning' | 'info' = 'info') {
    // 创建通知元素
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
      <span class="notification-message">${message}</span>
      <button class="notification-close">&times;</button>
    `;

    // 添加到页面
    document.body.appendChild(notification);

    // 显示动画
    setTimeout(() => notification.classList.add('show'), 10);

    // 自动关闭
    const autoClose = setTimeout(() => {
      hideNotification(notification);
    }, 5000);

    // 点击关闭
    const closeBtn = notification.querySelector('.notification-close');
    closeBtn?.addEventListener('click', () => {
      clearTimeout(autoClose);
      hideNotification(notification);
    });
  }

  function hideNotification(notification: HTMLElement) {
    notification.classList.remove('show');
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 300);
  }

  // 用户管理功能
  // 用户搜索和过滤
  const userSearchInput = document.getElementById('user-search') as HTMLInputElement;
  const roleFilterSelect = document.getElementById('role-filter') as HTMLSelectElement;
  const statusFilterSelect = document.getElementById('status-filter') as HTMLSelectElement;
  const sortBySelect = document.getElementById('sort-by') as HTMLSelectElement;
  const clearSearchBtn = document.getElementById('clear-search') as HTMLButtonElement;

  function filterUsers() {
    const searchTerm = userSearchInput?.value.toLowerCase().trim() || '';
    const roleFilter = roleFilterSelect?.value || '';
    const statusFilter = statusFilterSelect?.value || '';

    const userRows = document.querySelectorAll('.user-row');
    let visibleCount = 0;

    userRows.forEach(row => {
      const username = row.querySelector('td:first-child')?.textContent?.toLowerCase() || '';
      const email = row.querySelector('td:nth-child(2)')?.textContent?.toLowerCase() || '';
      const role = (row.querySelector('.role-select') as HTMLSelectElement)?.value || '';
      const status = (row.querySelector('.status-select') as HTMLSelectElement)?.value || '';

      const matchesSearch = !searchTerm ||
        username.includes(searchTerm) ||
        email.includes(searchTerm);
      const matchesRole = !roleFilter || role === roleFilter;
      const matchesStatus = !statusFilter || status === statusFilter;

      if (matchesSearch && matchesRole && matchesStatus) {
        (row as HTMLElement).style.display = '';
        visibleCount++;
      } else {
        (row as HTMLElement).style.display = 'none';
      }
    });

    // 显示过滤结果统计
    updateFilterStats(visibleCount, userRows.length);
  }

  function sortUsers() {
    const sortBy = sortBySelect?.value || 'username';
    const userTableBody = document.querySelector('.users-table tbody') as HTMLTableSectionElement;

    if (!userTableBody) return;

    const userRows = Array.from(userTableBody.querySelectorAll('.user-row'));

    userRows.sort((a, b) => {
      let aValue: string | number = '';
      let bValue: string | number = '';

      switch (sortBy) {
        case 'username':
          aValue = a.querySelector('td:first-child')?.textContent || '';
          bValue = b.querySelector('td:first-child')?.textContent || '';
          break;
        case 'created_at':
          aValue = new Date(a.querySelector('td:nth-child(5)')?.textContent || '').getTime();
          bValue = new Date(b.querySelector('td:nth-child(5)')?.textContent || '').getTime();
          break;
        case 'last_login':
          aValue = new Date(a.querySelector('td:nth-child(6)')?.textContent || '').getTime();
          bValue = new Date(b.querySelector('td:nth-child(6)')?.textContent || '').getTime();
          break;
        case 'generation_count':
          aValue = parseInt(a.querySelector('td:nth-child(7)')?.textContent || '0');
          bValue = parseInt(b.querySelector('td:nth-child(7)')?.textContent || '0');
          break;
      }

      if (typeof aValue === 'string' && typeof bValue === 'string') {
        return aValue.localeCompare(bValue);
      }

      return (aValue as number) - (bValue as number);
    });

    // 重新插入排序后的行
    userRows.forEach(row => {
      userTableBody.appendChild(row);
    });
  }

  function updateFilterStats(visible: number, total: number) {
    // 可以在这里添加显示过滤统计的代码
    console.log(`显示 ${visible} / ${total} 个用户`);
  }

  function clearSearch() {
    userSearchInput.value = '';
    roleFilterSelect.value = '';
    statusFilterSelect.value = '';
    filterUsers();
  }

  // 事件监听器
  userSearchInput?.addEventListener('input', filterUsers);
  roleFilterSelect?.addEventListener('change', filterUsers);
  statusFilterSelect?.addEventListener('change', filterUsers);
  sortBySelect?.addEventListener('change', sortUsers);
  clearSearchBtn?.addEventListener('click', clearSearch);

  // 防抖搜索
  let searchTimeout: number;
  userSearchInput?.addEventListener('input', () => {
    clearTimeout(searchTimeout);
    searchTimeout = window.setTimeout(filterUsers, 300);
  });

  // 用户角色和状态更新
  document.querySelectorAll('.save-user-btn').forEach(button => {
    button.addEventListener('click', async function(this: HTMLButtonElement) {
      const userId = this.getAttribute('data-user-id');
      const userRow = this.closest('.user-row');
      const roleSelect = userRow?.querySelector('.role-select') as HTMLSelectElement;
      const statusSelect = userRow?.querySelector('.status-select') as HTMLSelectElement;

      if (!userId || !roleSelect || !statusSelect) return;

      const originalRole = roleSelect.getAttribute('data-original-value') || roleSelect.value;
      const originalStatus = statusSelect.getAttribute('data-original-value') || statusSelect.value;
      const newRole = roleSelect.value;
      const newStatus = statusSelect.value;

      // 检查是否有变化
      if (originalRole === newRole && originalStatus === newStatus) {
        alert('没有检测到变化');
        return;
      }

      // 权限检查 - 防止用户给自己降级
      if (userId === '1' && (newRole !== 'admin' || newStatus !== 'active')) {
        alert('警告：不能修改超级管理员的权限！');
        // 恢复原始值
        roleSelect.value = originalRole;
        statusSelect.value = originalStatus;
        return;
      }

      // 敏感操作二次确认
      let confirmMessage = `确定要更新用户 "${userId}" 的信息吗？\n\n`;
      if (originalRole !== newRole) {
        confirmMessage += `角色: ${originalRole} → ${newRole}\n`;
      }
      if (originalStatus !== newStatus) {
        confirmMessage += `状态: ${originalStatus} → ${newStatus}\n`;
      }

      if (!confirm(confirmMessage)) {
        return;
      }

      try {
        // 更新角色
        if (originalRole !== newRole) {
          await updateUserRole(userId, newRole);
        }
        // 更新状态
        if (originalStatus !== newStatus) {
          await updateUserStatus(userId, newStatus);
        }

        // 更新原始值
        roleSelect.setAttribute('data-original-value', newRole);
        statusSelect.setAttribute('data-original-value', newStatus);

        // 显示成功消息
        showNotification('用户更新成功', 'success');
      } catch (error: unknown) {
        const errorMessage = error instanceof Error ? error.message : '更新失败';
        showNotification(`更新失败: ${errorMessage}`, 'error');
      }
    });
  });

  // 创建用户功能
  const createUserBtn = document.getElementById('create-user-btn') as HTMLButtonElement;
  const createUserModal = document.getElementById('create-user-modal') as HTMLDivElement;
  const createUserForm = document.getElementById('create-user-form') as HTMLFormElement;
  const cancelCreateBtn = document.getElementById('cancel-create') as HTMLButtonElement;
  const confirmCreateBtn = document.getElementById('confirm-create') as HTMLButtonElement;

  function showCreateUserModal() {
    if (createUserForm) createUserForm.reset();
    if (createUserModal) createUserModal.classList.add('show');
  }

  function hideCreateUserModal() {
    if (createUserModal) createUserModal.classList.remove('show');
  }

  createUserBtn?.addEventListener('click', showCreateUserModal);
  cancelCreateBtn?.addEventListener('click', hideCreateUserModal);

  createUserModal?.querySelector('.modal-close')?.addEventListener('click', hideCreateUserModal);

  // 点击模态框外部关闭
  createUserModal?.addEventListener('click', (e) => {
    if (e.target === createUserModal) {
      hideCreateUserModal();
    }
  });

  confirmCreateBtn?.addEventListener('click', async () => {
    const username = (document.getElementById('new-username') as HTMLInputElement)?.value.trim();
    const password = (document.getElementById('new-password') as HTMLInputElement)?.value;
    const email = (document.getElementById('new-email') as HTMLInputElement)?.value.trim();
    const role = (document.getElementById('new-role') as HTMLSelectElement)?.value;

    if (!username || !password) {
      showNotification('用户名和密码不能为空', 'error');
      return;
    }

    if (password.length < 6) {
      showNotification('密码长度至少为6位', 'error');
      return;
    }

    try {
      const result = await createUser({
        username,
        password,
        email: email || `${username}@example.com`,
        role
      });

      showNotification('用户创建成功', 'success');
      hideCreateUserModal();

      // 刷新页面以显示新用户
      setTimeout(() => {
        location.reload();
      }, 1000);
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : '创建用户失败';
      showNotification(`创建失败: ${errorMessage}`, 'error');
    }
  });

  // 删除用户功能
  document.querySelectorAll('.delete-user-btn').forEach(button => {
    button.addEventListener('click', async function(this: HTMLButtonElement) {
      const userId = this.getAttribute('data-user-id');
      const username = this.getAttribute('data-username');

      if (!userId || !username) return;

      // 更新删除模态框的内容
      const deleteMessage = document.getElementById('delete-user-message');
      if (deleteMessage) {
        deleteMessage.textContent = `确定要删除用户 "${username}" 吗？此操作不可撤销。`;
      }

      const deleteModal = document.getElementById('delete-user-modal');
      deleteModal?.classList.add('show');

      // 设置确认删除按钮的事件
      const confirmDeleteBtn = document.getElementById('confirm-delete');
      const cancelDeleteBtn = document.getElementById('cancel-delete');

      const handleConfirm = async () => {
        try {
          await deleteUser(userId);
          showNotification('用户删除成功', 'success');
          deleteModal?.classList.remove('show');

          // 从表格中移除用户行
          const userRow = document.querySelector(`.user-row[data-user-id="${userId}"]`);
          userRow?.remove();
        } catch (error: unknown) {
          const errorMessage = error instanceof Error ? error.message : '删除用户失败';
          showNotification(`删除失败: ${errorMessage}`, 'error');
        }
      };

      const handleCancel = () => {
        deleteModal?.classList.remove('show');
      };

      // 移除之前的事件监听器
      confirmDeleteBtn?.removeEventListener('click', handleConfirm);
      cancelDeleteBtn?.removeEventListener('click', handleCancel);

      // 添加新的事件监听器
      confirmDeleteBtn?.addEventListener('click', handleConfirm);
      cancelDeleteBtn?.addEventListener('click', handleCancel);

      // 关闭按钮
      deleteModal?.querySelector('.modal-close')?.addEventListener('click', handleCancel);

      // 点击模态框外部关闭
      deleteModal?.addEventListener('click', (e) => {
        if (e.target === deleteModal) {
          handleCancel();
        }
      });
    });
  });

  // 重置密码功能
  document.querySelectorAll('.reset-password-btn').forEach(button => {
    button.addEventListener('click', async function(this: HTMLButtonElement) {
      const userId = this.getAttribute('data-user-id');
      const username = this.getAttribute('data-username');

      if (!userId || !username) return;

      // 更新重置密码模态框的内容
      const resetMessage = document.getElementById('reset-password-message');
      if (resetMessage) {
        resetMessage.textContent = `为用户 "${username}" 设置新密码：`;
      }

      const resetModal = document.getElementById('reset-password-modal');
      const passwordInput = document.getElementById('new-password-input') as HTMLInputElement;
      resetModal?.classList.add('show');

      // 清空密码输入框
      if (passwordInput) {
        passwordInput.value = '';
        passwordInput.focus();
      }

      // 设置确认重置按钮的事件
      const confirmResetBtn = document.getElementById('confirm-reset');
      const cancelResetBtn = document.getElementById('cancel-reset');

      const handleConfirm = async () => {
        const newPassword = passwordInput?.value;

        if (!newPassword || newPassword.length < 6) {
          showNotification('密码长度至少为6位', 'error');
          return;
        }

        try {
          await resetUserPassword(userId, newPassword);
          showNotification('密码重置成功', 'success');
          resetModal?.classList.remove('show');
        } catch (error: unknown) {
          const errorMessage = error instanceof Error ? error.message : '重置密码失败';
          showNotification(`重置失败: ${errorMessage}`, 'error');
        }
      };

      const handleCancel = () => {
        resetModal?.classList.remove('show');
      };

      // 移除之前的事件监听器
      confirmResetBtn?.removeEventListener('click', handleConfirm);
      cancelResetBtn?.removeEventListener('click', handleCancel);

      // 添加新的事件监听器
      confirmResetBtn?.addEventListener('click', handleConfirm);
      cancelResetBtn?.addEventListener('click', handleCancel);

      // 关闭按钮
      resetModal?.querySelector('.modal-close')?.addEventListener('click', handleCancel);

      // 点击模态框外部关闭
      resetModal?.addEventListener('click', (e) => {
        if (e.target === resetModal) {
          handleCancel();
        }
      });
    });
  });

</script>