---
export const prerender = false;

import AdminLayout from '../../layouts/AdminLayout.astro';
import { requireRolesSSR } from '../../lib/auth/guard';
import { getSystemStats, getSystemLogs } from '../../api/workflows';

// Guard: require admin role
const cookieHeader = Astro.request.headers.get('cookie');
const guard = await requireRolesSSR(Astro.request.url, cookieHeader, { any: ['admin'] });
if (guard.response) {
  // 403 or redirect to login
  return guard.response;
}
const me = guard.me!;

// Fetch system stats
let systemStats: any = null;
let statsError: string | null = null;
try {
  systemStats = await getSystemStats({ cookies: cookieHeader || undefined });
} catch (e: any) {
  statsError = e?.message || 'Failed to fetch system stats';
}

// Fetch system logs
let systemLogs: any[] = [];
let logsError: string | null = null;
try {
  systemLogs = await getSystemLogs(20, { cookies: cookieHeader || undefined });
} catch (e: any) {
  logsError = e?.message || 'Failed to fetch system logs';
}
---

<AdminLayout title="系统监控">
  <div class="monitoring-page">
    <div class="page-header">
      <h1>系统监控</h1>
      <p>实时监控系统状态、性能指标和日志信息</p>
    </div>

    <!-- 系统监控模块 -->
    <section class="monitoring-section">
      <h2>系统监控</h2>
      {statsError ? (
        <div class="error">{statsError}</div>
      ) : systemStats && (
        <div class="stats-overview">
          <div class="card stats-container">
            <div class="stats-header">
              <h3>系统概览</h3>
              <div class="stats-controls">
                <button class="btn secondary refresh-stats" id="refresh-stats">刷新数据</button>
                <span class="last-updated">最后更新: {new Date().toLocaleTimeString('zh-CN')}</span>
              </div>
            </div>
            <div class="stats-grid">
              <div class="stat-card primary">
                <div class="stat-icon">👥</div>
                <div class="stat-content">
                  <h4>总用户数</h4>
                  <div class="stat-value">{systemStats.total_users}</div>
                  <div class="stat-trend positive">+12%</div>
                </div>
              </div>
              <div class="stat-card primary">
                <div class="stat-icon">🎨</div>
                <div class="stat-content">
                  <h4>总生成次数</h4>
                  <div class="stat-value">{systemStats.total_generations}</div>
                  <div class="stat-trend positive">+8%</div>
                </div>
              </div>
              <div class="stat-card secondary">
                <div class="stat-icon">⚙️</div>
                <div class="stat-content">
                  <h4>活跃工作流</h4>
                  <div class="stat-value">{systemStats.active_workflows}</div>
                  <div class="stat-trend neutral">稳定</div>
                </div>
              </div>
              <div class="stat-card secondary">
                <div class="stat-icon">🕐</div>
                <div class="stat-content">
                  <h4>系统运行时间</h4>
                  <div class="stat-value">{systemStats.system_uptime}</div>
                  <div class="stat-trend positive">正常</div>
                </div>
              </div>
              <div class="stat-card warning">
                <div class="stat-icon">🧠</div>
                <div class="stat-content">
                  <h4>内存使用率</h4>
                  <div class="stat-value">{systemStats.memory_usage}%</div>
                  <div class="stat-progress">
                    <div class="progress-bar" style={`width: ${systemStats.memory_usage}%`}></div>
                  </div>
                </div>
              </div>
              <div class="stat-card warning">
                <div class="stat-icon">⚡</div>
                <div class="stat-content">
                  <h4>CPU 使用率</h4>
                  <div class="stat-value">{systemStats.cpu_usage}%</div>
                  <div class="stat-progress">
                    <div class="progress-bar" style={`width: ${systemStats.cpu_usage}%`}></div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- 简单的图表区域 -->
          <div class="card charts-container">
            <h3>使用趋势</h3>
            <div class="chart-placeholder">
              <div class="chart-bar" style="height: 60%">用户增长</div>
              <div class="chart-bar" style="height: 80%">生成量</div>
              <div class="chart-bar" style="height: 40%">活跃度</div>
              <div class="chart-bar" style="height: 70%">系统负载</div>
            </div>
            <p class="chart-note">* 此为模拟图表，实际项目中可集成 Chart.js 或 D3.js</p>
          </div>
        </div>
      )}

      <!-- 系统日志 -->
      <div class="card logs-container">
        <h3>系统日志</h3>
        {logsError ? (
          <div class="error">{logsError}</div>
        ) : (
          <div class="logs-list">
            {systemLogs.map((log) => (
              <div class={`log-item log-${log.level}`}>
                <span class="log-time">{new Date(log.timestamp).toLocaleString('zh-CN')}</span>
                <span class="log-level">{log.level.toUpperCase()}</span>
                <span class="log-message">{log.message}</span>
                {log.user_id && <span class="log-user">用户: {log.user_id}</span>}
              </div>
            ))}
          </div>
        )}
      </div>
    </section>
  </div>
</AdminLayout>

<style>
  .monitoring-page {
    max-width: 1400px;
    margin: 0 auto;
  }

  .page-header {
    margin-bottom: 30px;
  }

  .page-header h1 {
    margin: 0 0 10px 0;
    color: var(--text-primary);
    font-size: 2.5rem;
    font-weight: 700;
  }

  .page-header p {
    margin: 0;
    color: var(--text-secondary);
    font-size: 1.1rem;
  }

  .monitoring-section {
    display: flex;
    flex-direction: column;
    gap: 30px;
  }

  .monitoring-section h2 {
    margin: 0 0 20px 0;
    color: var(--text-primary);
    font-size: 1.8rem;
    font-weight: 600;
  }

  .card {
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 12px;
    padding: 24px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: box-shadow 0.2s ease;
  }

  .card:hover {
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
  }

  .error {
    color: #c62828;
    background: #fee;
    border: 1px solid #f44336;
    border-radius: 8px;
    padding: 12px 16px;
    margin: 10px 0;
  }

  /* 系统监控样式 */
  .stats-container {
    padding: 24px;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
  }

  .stat-card {
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 12px;
    padding: 24px;
    text-align: center;
    position: relative;
    overflow: hidden;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .stat-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
  }

  .stat-card h4 {
    margin: 0 0 16px 0;
    color: var(--text-secondary);
    font-size: 1rem;
    font-weight: 500;
  }

  .stat-value {
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--accent-color);
    margin-bottom: 8px;
  }

  /* 增强的统计卡片样式 */
  .stats-overview {
    display: flex;
    flex-direction: column;
    gap: 30px;
  }

  .stats-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 24px;
  }

  .stats-header h3 {
    margin: 0;
    color: var(--text-primary);
    font-size: 1.5rem;
    font-weight: 600;
  }

  .stats-controls {
    display: flex;
    align-items: center;
    gap: 16px;
  }

  .last-updated {
    font-size: 0.9rem;
    color: var(--text-secondary);
  }

  .stat-card.primary {
    background: linear-gradient(135deg, var(--accent-color), #3b82f6);
    color: white;
  }

  .stat-card.secondary {
    background: linear-gradient(135deg, #10b981, #059669);
    color: white;
  }

  .stat-card.warning {
    background: var(--bg-secondary);
    border: 2px solid #f59e0b;
  }

  .stat-icon {
    font-size: 2.5rem;
    margin-bottom: 16px;
    opacity: 0.9;
  }

  .stat-content {
    display: flex;
    flex-direction: column;
    gap: 6px;
  }

  .stat-content h4 {
    margin: 0;
    font-size: 1rem;
    font-weight: 500;
    opacity: 0.9;
  }

  .stat-card.primary .stat-content h4,
  .stat-card.secondary .stat-content h4 {
    color: rgba(255, 255, 255, 0.9);
  }

  .stat-card.primary .stat-value,
  .stat-card.secondary .stat-value {
    color: white;
  }

  .stat-trend {
    font-size: 0.8rem;
    font-weight: 600;
    padding: 3px 8px;
    border-radius: 12px;
    text-align: center;
    margin-top: 6px;
  }

  .stat-trend.positive {
    background: rgba(34, 197, 94, 0.2);
    color: #22c55e;
  }

  .stat-trend.negative {
    background: rgba(239, 68, 68, 0.2);
    color: #ef4444;
  }

  .stat-trend.neutral {
    background: rgba(156, 163, 175, 0.2);
    color: #6b7280;
  }

  .stat-card.primary .stat-trend.positive,
  .stat-card.primary .stat-trend.neutral,
  .stat-card.secondary .stat-trend.positive,
  .stat-card.secondary .stat-trend.neutral {
    background: rgba(255, 255, 255, 0.2);
    color: white;
  }

  .stat-progress {
    width: 100%;
    height: 8px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 4px;
    margin-top: 10px;
    overflow: hidden;
  }

  .stat-card.primary .stat-progress,
  .stat-card.secondary .stat-progress {
    background: rgba(255, 255, 255, 0.3);
  }

  .progress-bar {
    height: 100%;
    background: #22c55e;
    border-radius: 4px;
    transition: width 0.3s ease;
  }

  .stat-card.primary .progress-bar {
    background: rgba(255, 255, 255, 0.8);
  }

  .stat-card.secondary .progress-bar {
    background: rgba(255, 255, 255, 0.8);
  }

  /* 图表样式 */
  .charts-container {
    padding: 24px;
  }

  .charts-container h3 {
    margin: 0 0 24px 0;
    color: var(--text-primary);
    font-size: 1.3rem;
    font-weight: 600;
  }

  .chart-placeholder {
    display: flex;
    align-items: end;
    justify-content: space-around;
    height: 250px;
    margin: 24px 0;
    padding: 0 24px;
  }

  .chart-bar {
    width: 80px;
    background: linear-gradient(180deg, var(--accent-color), #3b82f6);
    border-radius: 6px 6px 0 0;
    display: flex;
    align-items: end;
    justify-content: center;
    color: white;
    font-size: 0.9rem;
    font-weight: 500;
    padding: 10px 6px 0;
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
    transition: all 0.3s ease;
  }

  .chart-bar:hover {
    transform: translateY(-6px);
    box-shadow: 0 6px 20px rgba(59, 130, 246, 0.4);
  }

  .chart-note {
    text-align: center;
    color: var(--text-secondary);
    font-size: 0.9rem;
    margin-top: 20px;
    font-style: italic;
  }

  /* 刷新按钮动画 */
  .refresh-stats {
    position: relative;
    overflow: hidden;
    transition: all 0.2s ease;
  }

  .refresh-stats:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
  }

  .refresh-stats::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    background: rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    transform: translate(-50%, -50%);
    transition: width 0.3s ease, height 0.3s ease;
  }

  .refresh-stats:hover::before {
    width: 120%;
    height: 120%;
  }

  .logs-container {
    padding: 24px;
  }

  .logs-container h3 {
    margin: 0 0 20px 0;
    color: var(--text-primary);
    font-size: 1.3rem;
    font-weight: 600;
  }

  .logs-list {
    max-height: 500px;
    overflow-y: auto;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    background: var(--bg-primary);
  }

  .log-item {
    display: flex;
    align-items: center;
    gap: 16px;
    padding: 12px 16px;
    border-bottom: 1px solid var(--border-color);
    font-size: 0.9rem;
    transition: background-color 0.2s ease;
  }

  .log-item:hover {
    background: var(--bg-secondary);
  }

  .log-info {
    background: #e8f5e9;
    color: #2e7d32;
  }

  .log-warning {
    background: #fff3e0;
    color: #f57c00;
  }

  .log-error {
    background: #ffebee;
    color: #c62828;
  }

  .log-time {
    font-size: 0.85rem;
    color: var(--text-secondary);
    min-width: 160px;
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  }

  .log-level {
    font-weight: 600;
    padding: 3px 8px;
    border-radius: 4px;
    font-size: 0.75rem;
    min-width: 60px;
    text-align: center;
    background: rgba(0, 0, 0, 0.1);
  }

  .log-message {
    flex: 1;
    word-break: break-word;
  }

  .log-user {
    font-size: 0.8rem;
    color: var(--text-secondary);
    font-style: italic;
  }

  .btn {
    display: inline-block;
    padding: 10px 16px;
    border-radius: 8px;
    text-decoration: none;
    background: var(--accent-color);
    color: #fff;
    border: 1px solid var(--accent-color);
    font-size: 0.9rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .btn.secondary {
    background: transparent;
    color: var(--accent-color);
  }

  .btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
  }

  .btn.secondary:hover {
    background: var(--accent-color);
    color: white;
  }

  /* 响应式设计 */
  @media (max-width: 1024px) {
    .stats-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 16px;
    }

    .stat-card {
      padding: 20px;
    }

    .stat-value {
      font-size: 2rem;
    }

    .chart-placeholder {
      height: 200px;
    }

    .chart-bar {
      width: 60px;
    }
  }

  @media (max-width: 768px) {
    .monitoring-page {
      padding: 0;
    }

    .page-header {
      margin-bottom: 20px;
    }

    .page-header h1 {
      font-size: 2rem;
    }

    .stats-grid {
      grid-template-columns: 1fr;
      gap: 12px;
    }

    .stat-card {
      padding: 16px;
    }

    .stat-value {
      font-size: 1.5rem;
    }

    .chart-placeholder {
      height: 180px;
      padding: 0 16px;
    }

    .chart-bar {
      width: 50px;
      font-size: 0.8rem;
    }

    .logs-list {
      max-height: 400px;
    }

    .log-item {
      flex-direction: column;
      align-items: flex-start;
      gap: 6px;
    }

    .log-time {
      min-width: auto;
      font-size: 0.75rem;
    }
  }

  @media (max-width: 480px) {
    .page-header h1 {
      font-size: 1.8rem;
    }

    .card {
      padding: 16px;
    }

    .logs-container {
      padding: 16px;
    }

    .logs-list {
      max-height: 300px;
    }

    .log-item {
      padding: 10px 12px;
      font-size: 0.85rem;
    }
  }

  /* 深色模式支持 */
  @media (prefers-color-scheme: dark) {
    .log-info {
      background: #1b5e20;
      color: #81c784;
    }

    .log-warning {
      background: #e65100;
      color: #ffb74d;
    }

    .log-error {
      background: #b71c1c;
      color: #ef5350;
    }
  }
</style>

<script>
  // 辅助函数
  function showNotification(message: string, type: 'success' | 'error' | 'warning' | 'info' = 'info') {
    // 创建通知元素
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
      <span class="notification-message">${message}</span>
      <button class="notification-close">&times;</button>
    `;

    // 添加到页面
    document.body.appendChild(notification);

    // 显示动画
    setTimeout(() => notification.classList.add('show'), 10);

    // 自动关闭
    const autoClose = setTimeout(() => {
      hideNotification(notification);
    }, 5000);

    // 点击关闭
    const closeBtn = notification.querySelector('.notification-close');
    closeBtn?.addEventListener('click', () => {
      clearTimeout(autoClose);
      hideNotification(notification);
    });
  }

  function hideNotification(notification: HTMLElement) {
    notification.classList.remove('show');
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 300);
  }

  // 统计数据刷新功能
  const refreshStatsBtn = document.getElementById('refresh-stats') as HTMLButtonElement;
  const lastUpdatedSpan = document.querySelector('.last-updated') as HTMLSpanElement;
  const userLang = navigator.language || 'zh-CN';

  refreshStatsBtn?.addEventListener('click', async function() {
    // 添加加载状态
    this.textContent = '刷新中...';
    this.disabled = true;

    try {
      // 模拟刷新数据（实际项目中应该重新获取数据）
      await new Promise(resolve => setTimeout(resolve, 1000));

      // 更新最后更新时间
      if (lastUpdatedSpan) {
        lastUpdatedSpan.textContent = `最后更新: ${new Date().toLocaleTimeString(userLang)}`;
      }

      // 显示成功提示
      showNotification('数据已刷新', 'success');
    } catch (error) {
      showNotification('刷新失败，请重试', 'error');
    } finally {
      // 恢复按钮状态
      this.textContent = '刷新数据';
      this.disabled = false;
    }
  });

  // 自动刷新功能（可选）
  let autoRefreshInterval: number | null = null;

  function startAutoRefresh() {
    autoRefreshInterval = window.setInterval(() => {
      if (lastUpdatedSpan) {
        lastUpdatedSpan.textContent = `最后更新: ${new Date().toLocaleTimeString(userLang)}`;
      }
    }, 30000); // 每30秒更新一次
  }

  function stopAutoRefresh() {
    if (autoRefreshInterval) {
      clearInterval(autoRefreshInterval);
      autoRefreshInterval = null;
    }
  }

  // 页面可见性API - 当页面变为可见时刷新数据
  document.addEventListener('visibilitychange', () => {
    if (document.visibilityState === 'visible') {
      // 页面变为可见时，更新时间戳
      if (lastUpdatedSpan) {
        lastUpdatedSpan.textContent = `最后更新: ${new Date().toLocaleTimeString(userLang)}`;
      }
    }
  });

  // 启动自动刷新
  startAutoRefresh();

  // 通知样式（添加到页面）
  const notificationStyles = document.createElement('style');
  notificationStyles.textContent = `
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 10000;
      padding: 16px 20px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      display: flex;
      align-items: center;
      gap: 12px;
      max-width: 400px;
      transform: translateX(100%);
      opacity: 0;
      transition: all 0.3s ease;
      font-size: 0.9rem;
    }

    .notification.show {
      transform: translateX(0);
      opacity: 1;
    }

    .notification-success {
      background: #d1fae5;
      color: #065f46;
      border: 1px solid #a7f3d0;
    }

    .notification-error {
      background: #fee2e2;
      color: #991b1b;
      border: 1px solid #fecaca;
    }

    .notification-warning {
      background: #fef3c7;
      color: #92400e;
      border: 1px solid #fde68a;
    }

    .notification-info {
      background: #dbeafe;
      color: #1e40af;
      border: 1px solid #bfdbfe;
    }

    .notification-message {
      flex: 1;
    }

    .notification-close {
      background: none;
      border: none;
      font-size: 20px;
      cursor: pointer;
      padding: 0;
      width: 20px;
      height: 20px;
      display: flex;
      align-items: center;
      justify-content: center;
      opacity: 0.7;
      transition: opacity 0.2s ease;
    }

    .notification-close:hover {
      opacity: 1;
    }
  `;
  document.head.appendChild(notificationStyles);
</script>