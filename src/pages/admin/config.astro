---
export const prerender = false;

import Layout from '../../layouts/AdminLayout.astro';
import { requireRolesSSR } from '../../lib/auth/guard';
import { pingAdmin } from '../../lib/auth/service';
import { getSystemConfig, updateSystemConfig } from '../../api/workflows';

// Guard: require admin role
const cookieHeader = Astro.request.headers.get('cookie');
const guard = await requireRolesSSR(Astro.request.url, cookieHeader, { any: ['admin'] });
if (guard.response) {
  // 403 or redirect to login
  return guard.response;
}
const me = guard.me!;

// Fetch system config
let systemConfig: any = null;
let configError: string | null = null;
try {
  systemConfig = await getSystemConfig({ cookies: cookieHeader || undefined });
} catch (e: any) {
  configError = e?.message || 'Failed to fetch system config';
}
---

<Layout title="系统配置">
  <!-- 主内容区域 -->
  <main class="admin-main">
      <!-- 配置管理模块 -->
      <section id="config" class="admin-section active">
        <h1>系统配置</h1>
        <p class="desc">管理系统各项配置参数，包括API限制、安全设置等。</p>

        {configError ? (
          <div class="error">{configError}</div>
        ) : systemConfig && (
          <div class="card config-container">
            <form id="config-form" class="config-form">
              <div class="config-grid">
                <div class="config-item">
                  <label for="api_rate_limit">API 速率限制</label>
                  <input type="number" id="api_rate_limit" name="api_rate_limit" value={systemConfig.api_rate_limit} />
                  <small class="config-help">每分钟允许的API请求次数</small>
                </div>
                <div class="config-item">
                  <label for="max_file_size">最大文件大小</label>
                  <input type="text" id="max_file_size" name="max_file_size" value={systemConfig.max_file_size} />
                  <small class="config-help">上传文件的最大大小（如：10MB）</small>
                </div>
                <div class="config-item">
                  <label for="session_timeout">会话超时时间(秒)</label>
                  <input type="number" id="session_timeout" name="session_timeout" value={systemConfig.session_timeout} />
                  <small class="config-help">用户会话的超时时间</small>
                </div>
                <div class="config-item">
                  <label for="enable_registration">启用注册</label>
                  <input type="checkbox" id="enable_registration" name="enable_registration" checked={systemConfig.enable_registration} />
                  <small class="config-help">允许新用户注册账号</small>
                </div>
                <div class="config-item">
                  <label for="maintenance_mode">维护模式</label>
                  <input type="checkbox" id="maintenance_mode" name="maintenance_mode" checked={systemConfig.maintenance_mode} />
                  <small class="config-help">启用后系统进入维护状态</small>
                </div>
                <div class="config-item">
                  <label for="smtp_enabled">启用 SMTP</label>
                  <input type="checkbox" id="smtp_enabled" name="smtp_enabled" checked={systemConfig.smtp_enabled} />
                  <small class="config-help">启用邮件发送功能</small>
                </div>
              </div>
              <div class="config-actions">
                <button type="submit" class="btn">保存配置</button>
                <button type="button" class="btn secondary" id="reset-config">重置</button>
                <div id="config-message" class="message"></div>
              </div>
            </form>
          </div>
        )}

        <!-- 配置历史记录 -->
        <div class="card config-history">
          <h3>配置变更历史</h3>
          <div class="history-list" id="config-history-list">
            <p class="no-history">暂无配置变更记录</p>
          </div>
        </div>
      </section>
  </main>
</Layout>

<style>
  .admin-page {
    display: flex;
    min-height: 100vh;
    background: var(--bg-primary);
  }


  .admin-section {
    display: none;
    animation: fadeIn 0.3s ease;
  }

  .admin-section.active {
    display: block;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* 响应式设计 */
  @media (max-width: 768px) {
    .config-grid {
      grid-template-columns: 1fr !important;
      gap: 12px !important;
    }

    .search-filter {
      flex-direction: column;
      gap: 8px;
    }

    .search-input,
    .filter-select {
      width: 100%;
    }

    .logs-list {
      max-height: 300px;
    }

    .log-item {
      flex-direction: column;
      align-items: flex-start;
      gap: 4px;
    }

    .log-time {
      min-width: auto;
      font-size: 0.75rem;
    }
  }

  @media (max-width: 480px) {
    .card {
      padding: 12px;
    }

    .title {
      font-size: 20px;
    }

    .btn {
      padding: 8px 10px;
      font-size: 0.9rem;
    }
  }

  /* 深色模式支持 */
  @media (prefers-color-scheme: dark) {
    .log-info {
      background: #1b5e20;
      color: #81c784;
    }

    .log-warning {
      background: #e65100;
      color: #ffb74d;
    }

    .log-error {
      background: #b71c1c;
      color: #ef5350;
    }
  }

  /* 通知样式 */
  .notification {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 10000;
    padding: 16px 20px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    display: flex;
    align-items: center;
    gap: 12px;
    max-width: 400px;
    transform: translateX(100%);
    opacity: 0;
    transition: all 0.3s ease;
    font-size: 0.9rem;
  }

  .notification.show {
    transform: translateX(0);
    opacity: 1;
  }

  .notification-success {
    background: #d1fae5;
    color: #065f46;
    border: 1px solid #a7f3d0;
  }

  .notification-error {
    background: #fee2e2;
    color: #991b1b;
    border: 1px solid #fecaca;
  }

  .notification-warning {
    background: #fef3c7;
    color: #92400e;
    border: 1px solid #fde68a;
  }

  .notification-info {
    background: #dbeafe;
    color: #1e40af;
    border: 1px solid #bfdbfe;
  }

  .notification-message {
    flex: 1;
  }

  .notification-close {
    background: none;
    border: none;
    font-size: 20px;
    cursor: pointer;
    padding: 0;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0.7;
    transition: opacity 0.2s ease;
  }

  .notification-close:hover {
    opacity: 1;
  }

  /* 打印样式 */
  @media print {
    .actions,
    .notification {
      display: none !important;
    }

    .admin-section {
      display: block !important;
    }
  }

  .title { margin: 0; font-size: 24px; color: var(--text-primary); }
  .desc { color: var(--text-secondary); margin: 0 0 8px 0; }
  .card {
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 12px;
    padding: 16px;
    margin-bottom: 20px;
  }
  .error { color: #c62828; background: #fee; border: 1px solid #f44336; border-radius: 8px; padding: 10px 12px; }
  .actions { display: flex; gap: 10px; }
  .btn { display: inline-block; padding: 10px 12px; border-radius: 8px; text-decoration: none; background: var(--accent-color); color: #fff; border: 1px solid var(--accent-color); }
  .btn.secondary { background: transparent; color: var(--accent-color); }

  /* 配置管理样式 */
  .config-container {
    padding: 16px;
  }

  .config-form {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .config-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 16px;
  }

  .config-item {
    display: flex;
    flex-direction: column;
    gap: 6px;
  }

  .config-item label {
    font-weight: 500;
    color: var(--text-primary);
  }

  .config-item input[type="text"],
  .config-item input[type="number"] {
    padding: 8px 12px;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    background: var(--bg-primary);
    color: var(--text-primary);
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
  }

  .config-item input[type="text"]:focus,
  .config-item input[type="number"]:focus {
    outline: none;
    border-color: var(--accent-color);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .config-item input[type="checkbox"] {
    width: 18px;
    height: 18px;
    margin-right: 8px;
  }

  .config-item label:has(input[type="checkbox"]) {
    display: flex;
    align-items: center;
    cursor: pointer;
  }

  .config-help {
    font-size: 0.8rem;
    color: var(--text-secondary);
    margin-top: 2px;
  }

  .config-actions {
    display: flex;
    align-items: center;
    gap: 12px;
    padding-top: 20px;
    border-top: 1px solid var(--border-color);
  }

  .message {
    margin-top: 10px;
    padding: 10px;
    border-radius: 8px;
  }

  .message.success {
    background: #e8f5e9;
    color: #2e7d32;
    border: 1px solid #4caf50;
  }

  .message.error {
    background: #ffebee;
    color: #c62828;
    border: 1px solid #f44336;
  }

  /* 配置历史样式 */
  .config-history {
    padding: 16px;
  }

  .history-list {
    margin-top: 12px;
  }

  .no-history {
    color: var(--text-secondary);
    font-style: italic;
    text-align: center;
    padding: 20px;
  }
</style>

<script>
  // Import the required functions directly in the client script
  import { updateSystemConfig } from '../../api/workflows';

  // 辅助函数
  function logAdminAction(action: string, details: any) {
    const logEntry = {
      timestamp: new Date().toISOString(),
      action,
      details,
      userAgent: navigator.userAgent,
      url: window.location.href
    };

    // 在实际项目中，这里应该发送到服务器
    console.log('Admin Action Log:', logEntry);

    // 本地存储用于演示
    const logs = JSON.parse(localStorage.getItem('admin_logs') || '[]');
    logs.push(logEntry);
    localStorage.setItem('admin_logs', JSON.stringify(logs.slice(-100))); // 保留最近100条记录
  }

  function showNotification(message: string, type: 'success' | 'error' | 'warning' | 'info' = 'info') {
    // 创建通知元素
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
      <span class="notification-message">${message}</span>
      <button class="notification-close">&times;</button>
    `;

    // 添加到页面
    document.body.appendChild(notification);

    // 显示动画
    setTimeout(() => notification.classList.add('show'), 10);

    // 自动关闭
    const autoClose = setTimeout(() => {
      hideNotification(notification);
    }, 5000);

    // 点击关闭
    const closeBtn = notification.querySelector('.notification-close');
    closeBtn?.addEventListener('click', () => {
      clearTimeout(autoClose);
      hideNotification(notification);
    });
  }

  function hideNotification(notification: HTMLElement) {
    notification.classList.remove('show');
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 300);
  }

  // 配置管理功能
  const configForm = document.getElementById('config-form') as HTMLFormElement;
  const configMessageDiv = document.getElementById('config-message') as HTMLDivElement;
  const resetConfigBtn = document.getElementById('reset-config') as HTMLButtonElement;

  configForm?.addEventListener('submit', async function(e: Event) {
    e.preventDefault();

    const formData = new FormData(configForm);
    const config: Record<string, any> = {};

    // 收集表单数据
    for (const [key, value] of formData.entries()) {
      if (key.includes('enable_') || key.includes('maintenance_') || key.includes('smtp_')) {
        config[key] = (document.getElementById(key) as HTMLInputElement)?.checked || false;
      } else {
        config[key] = value;
      }
    }

    // 二次确认
    if (!confirm('确定要保存系统配置吗？此操作可能会影响系统运行。')) {
      return;
    }

    // 记录操作日志
    logAdminAction('config_update', {
      changes: config,
      timestamp: new Date().toISOString()
    });

    try {
      const result = await updateSystemConfig(config);

      // 显示成功消息
      if (configMessageDiv) {
        configMessageDiv.textContent = result.message;
        configMessageDiv.className = 'message success';
      }

      // 显示通知
      showNotification('配置保存成功', 'success');

      // 更新配置历史
      updateConfigHistory(config);
    } catch (error: unknown) {
      // 显示错误消息
      if (configMessageDiv) {
        const errorMessage = error instanceof Error ? error.message : '保存失败';
        configMessageDiv.textContent = errorMessage;
        configMessageDiv.className = 'message error';
      }

      // 显示错误通知
      showNotification('配置保存失败', 'error');
    }
  });

  // 重置配置功能
  resetConfigBtn?.addEventListener('click', function() {
    if (confirm('确定要重置所有配置为默认值吗？')) {
      // 这里可以实现重置逻辑
      showNotification('配置已重置', 'info');
    }
  });

  // 更新配置历史
  function updateConfigHistory(config: Record<string, any>) {
    const historyList = document.getElementById('config-history-list');
    if (!historyList) return;

    const historyItem = document.createElement('div');
    historyItem.className = 'history-item';
    historyItem.innerHTML = `
      <div class="history-header">
        <span class="history-time">${new Date().toLocaleString('zh-CN')}</span>
        <span class="history-action">配置更新</span>
      </div>
      <div class="history-details">
        <pre>${JSON.stringify(config, null, 2)}</pre>
      </div>
    `;

    // 移除"暂无记录"提示
    const noHistory = historyList.querySelector('.no-history');
    if (noHistory) {
      noHistory.remove();
    }

    // 添加新记录到顶部
    historyList.insertBefore(historyItem, historyList.firstChild);
  }


  // 页面加载时的初始化
  document.addEventListener('DOMContentLoaded', function() {
    // 可以在这里添加页面初始化逻辑
    console.log('Config page loaded');
  });
</script>