---
// src/components/DynamicWorkflow.astro
import ImageUploader from './ImageUploader.astro';
import ImageEditor from './ImageEditor.astro';
import PromptInput from './PromptInput.astro';
import ToggleWithText from './ToggleWithText.astro';
import { getTranslator } from '@gudupao/astro-i18n';
import { getWorkflowFormSchema, executeWorkflowWithForm, getExecutionStatus, cancelExecution } from '../api/workflows';

interface WorkflowParam {
 node_id: string;
  title: string;
  class_type: string;
}

interface Props {
  params: WorkflowParam[];
  workflowId: string;
  executionResult?: any;
  executionError?: string | null;
}

const { params = [], workflowId, executionResult, executionError } = Astro.props;

// Get language from params or cookie
const lang = Astro.params.lang || Astro.cookies.get('lang')?.value || 'en';
const t = getTranslator(lang);
---

<!-- Image Editor Modal -->
<ImageEditor />

<div class="workflow-container">
  {
    params.map((param) => (
      <div class="component-wrapper">
        {(() => {
          if (param.class_type === 'LoadImageOutput') {
            return <ImageUploader />;
          } else if (param.class_type === 'Text') {
            return <PromptInput placeholder={param.title} />;
          } else if (param.class_type === 'Switch any [Crystools]') {
            return <ToggleWithText text={param.title} />;
          } else {
            return (
              <div class="unknown-component">
                <p>{t('dynamicworkflow.unknownComponent')}: {param.class_type}</p>
                <p>{t('dynamicworkflow.nodeId')}: {param.node_id}</p>
                <p>{t('dynamicworkflow.title')}: {param.title}</p>
              </div>
            );
          }
        })()}
      </div>
    ))
  }
  
  <div class="workflow-controls">
    <form method="post" action="">
      <input type="hidden" name="workflowId" value={workflowId} />
      <input type="hidden" name="params" value={JSON.stringify(params)} />
      <button
        class="execute-btn"
        type="submit"
      >
        {t('dynamicworkflow.execute')}
      </button>
    </form>
  </div>
  
  {executionResult && (
    <div class="execution-result">
      <h3>{t('dynamicworkflow.result')}:</h3>
      <pre>{JSON.stringify(executionResult, null, 2)}</pre>
    </div>
  )}
  
  {executionError && (
    <div class="execution-error">
      <h3>{t('dynamicworkflow.error')}:</h3>
      <p>{executionError}</p>
    </div>
  )}
</div>

<style>
  .workflow-container {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    padding: 1.5rem;
    width: 100%;
    max-width: 600px;
    margin: 0 auto;
  }

  .component-wrapper {
    display: flex;
    justify-content: center;
  }

  .workflow-controls {
    display: flex;
    justify-content: center;
  }

  .unknown-component {
    padding: 1.5rem;
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 0.75rem;
    color: var(--text-primary);
  }

  .execute-btn {
    padding: 14px 28px;
    background: var(--accent-color);
    color: white;
    border: none;
    border-radius: 12px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    min-height: 48px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    position: relative;
    overflow: hidden;
  }

  .execute-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s;
  }

  .execute-btn:hover {
    background: var(--accent-hover);
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(59, 130, 246, 0.4);
  }

  .execute-btn:hover::before {
    left: 100%;
  }

  .execute-btn:active {
    transform: translateY(0);
    box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
  }

  .execute-btn:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);
  }

  .execute-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .execute-btn {
      padding: 16px 24px;
      font-size: 16px;
      min-height: 52px;
      width: 100%;
      max-width: 300px;
    }
  }

  @media (max-width: 480px) {
    .execute-btn {
      padding: 18px 20px;
      font-size: 16px;
      min-height: 56px;
    }
  }
</style>