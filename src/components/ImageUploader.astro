---
// src/components/ImageUploader.astro
import { getTranslator } from '@gudupao/astro-i18n';

interface Props {
  title?: string;
}

const { title } = Astro.props;

// Get language from params or cookie
const lang = Astro.params.lang || Astro.cookies.get('lang')?.value || 'en';
const t = getTranslator(lang);
---
<div id="upload-box" class="upload-box">
  <div class="upload-content">
    <svg class="upload-icon" width="48" height="48" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path><path d="M17 8l-5-5-5 5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path><path d="M12 3v12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path></svg>
    <p>{title || t('imageuploader.uploadText')}</p>
  </div>
  <img id="image-preview" class="image-preview" src="" alt="Image preview" hidden />
  <button id="edit-btn" class="edit-btn" hidden>{t('imageuploader.editButton')}</button>
  <input type="file" id="file-input" name="files" accept="image/*" hidden />
  <!-- Hidden element to store translated messages -->
  <div id="translations" style="display: none;"
       data-alert-message="{t('imageuploader.alertMessage')}">
  </div>
</div>

<style>
  .upload-box {
    width: 250px;
    height: 250px;
    border: 2px dashed var(--border-color);
    border-radius: 24px;
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    background: var(--bg-secondary);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
  }

  .upload-box:hover {
    border-color: var(--accent-color);
    background: var(--glass-bg);
  }

  .upload-box.dragover {
    border-style: solid;
    border-color: var(--accent-color);
    background: rgba(59, 130, 246, 0.1);
  }
  
  .upload-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 8px;
    color: var(--text-secondary);
    z-index: 1; /* Ensure content is above preview */
  }

  .upload-content p {
    margin: 0;
    font-size: 14px;
    color: var(--text-primary);
  }

  .upload-content strong {
    color: var(--accent-color);
  }

  .upload-icon path {
    transition: stroke 0.3s ease;
  }

  .upload-box:hover .upload-icon path,
  .upload-box.dragover .upload-icon path {
    stroke: var(--accent-color);
  }

  .image-preview {
    width: 100%;
    height: 100%;
    object-fit: cover;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 0; /* Behind content initially */
  }

  /* When preview is shown, hide content and make preview interactive */
  .upload-box.preview-shown .upload-content {
    display: none;
  }

  .upload-box.preview-shown .image-preview {
    z-index: 1; /* Bring preview to front */
  }

  .edit-btn {
    position: absolute;
    top: 10px;
    right: 10px;
    background: var(--accent-color);
    color: white;
    border: none;
    border-radius: 6px;
    padding: 8px 12px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    z-index: 2;
    transition: all 0.2s ease;
    box-shadow: 0 2px 4px var(--shadow-light);
  }

  .edit-btn:hover {
    background: var(--accent-hover);
    transform: translateY(-1px);
    box-shadow: 0 4px 8px var(--shadow-medium);
  }

  /* Tablet and mobile responsive adjustments */
  @media (max-width: 768px) {
    .upload-box {
      width: 200px;
      height: 200px;
      border-radius: 16px;
    }

    .upload-content p {
      font-size: 12px;
    }

    .upload-icon {
      width: 36px;
      height: 36px;
    }

    .edit-btn {
      padding: 6px 10px;
      font-size: 12px;
      min-height: 36px;
      min-width: 36px;
    }
  }

  @media (max-width: 480px) {
    .upload-box {
      width: 180px;
      height: 180px;
    }

    .edit-btn {
      top: 5px;
      right: 5px;
      padding: 4px 8px;
      font-size: 11px;
    }
  }

  /* Touch device specific styles */
  @media (hover: none) and (pointer: coarse) {
    .edit-btn:active {
      transform: scale(0.95);
    }

    .upload-box:active {
      transform: scale(0.98);
    }
  }
</style>

<script>
  const uploadBox = document.getElementById('upload-box');
  const fileInput = document.getElementById('file-input') as HTMLInputElement | null;
  const imagePreview = document.getElementById('image-preview') as HTMLImageElement | null;
  const editBtn = document.getElementById('edit-btn') as HTMLButtonElement | null;
  const uploadContent = uploadBox?.querySelector('.upload-content');

  function handleFiles(files: FileList) {
    if (files.length === 0) return;
    const file = files[0];

    // Check if the file is an image
    if (!file.type.startsWith('image/')){
      // Get translated message from hidden element
      const translationsElement = document.getElementById('translations');
      const alertMessage = translationsElement?.getAttribute('data-alert-message') || 'Please upload an image file';
      alert(alertMessage);
      return;
    }

    // Display image preview
    if (imagePreview && uploadContent) {
      const reader = new FileReader();
      reader.onload = () => {
        imagePreview.src = reader.result as string;
        imagePreview.hidden = false;
        uploadContent.setAttribute('hidden', 'true');
        // Show edit button
        if (editBtn) {
          editBtn.hidden = false;
        }
        // Add class to indicate preview is shown
        uploadBox?.classList.add('preview-shown');
      }
      reader.readAsDataURL(file);
    }

    // You can also proceed with uploading the file to a server here.
    console.log(`File selected: ${file.name}, size: ${file.size} bytes`);

    // 保留所选文件于 input.files，供提交时 FormData 附带
  }

  if (uploadBox && fileInput) {
    // Trigger file input click
    uploadBox.addEventListener('click', () => {
      fileInput.click();
    });

    // Handle file selection
    fileInput.addEventListener('change', (event) => {
      const files = (event.target as HTMLInputElement).files;
      if (files && files.length > 0) {
        handleFiles(files);
      }
    });

    // Prevent default drag behaviors
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      uploadBox.addEventListener(eventName, preventDefaults, false);
    });

    function preventDefaults(e: Event) {
      e.preventDefault();
      e.stopPropagation();
    }

    // Highlight drop area when item is dragged over it
    ['dragenter', 'dragover'].forEach(eventName => {
      uploadBox.addEventListener(eventName, () => uploadBox.classList.add('dragover'), false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
      uploadBox.addEventListener(eventName, () => uploadBox.classList.remove('dragover'), false);
    });

    // Handle dropped files
    uploadBox.addEventListener('drop', (event) => {
      const dt = (event as DragEvent).dataTransfer;
      if (dt) {
        const files = dt.files;
        handleFiles(files);
      }
    }, false);
  }

  // Handle edit button click
  if (editBtn) {
    editBtn.addEventListener('click', (e) => {
      e.stopPropagation(); // Prevent triggering upload box click
      if (imagePreview && imagePreview.src) {
        // Open image editor
        if (window.imageEditor) {
          window.imageEditor.open(imagePreview.src);
        }
      }
    });
  }

  // Handle edited image
  document.addEventListener('imageEdited', (event: any) => {
    if (imagePreview && event.detail?.imageData) {
      imagePreview.src = event.detail.imageData;
    }
  });
</script>