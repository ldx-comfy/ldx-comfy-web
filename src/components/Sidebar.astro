---
// src/components/Sidebar.astro
import { getTranslator } from '@gudupao/astro-i18n';
import LanguageSwitcher from './LanguageSwitcher.astro';
import ThemeSwitcher from './ThemeSwitcher.astro';
import { hasAnyRole } from '../lib/auth/store';

// Define props interface
interface Props {
  me?: any;
}

const { me } = Astro.props as Props;

// Get language from params or cookie
const lang = Astro.params.lang || Astro.cookies.get('lang')?.value || 'en';
const t = getTranslator(lang);

// Check if user has admin role
const isAdmin = hasAnyRole(me, ['admin']);
---
<aside>
  <div class="sidebar-header">
    <svg width="40" height="40" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path><path d="M2 12l10 5 10-5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path></svg>
    <h2>{t('sidebar.appName')}</h2>
  </div>
  <nav>
    <ul>
      <li><a href="/" class="nav-link" data-path="/">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M3 9l9-7 9 7v11a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path><path d="M9 22V12h6v10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path></svg>
        <span>{t('sidebar.home')}</span>
      </a></li>
    <li><a href="/me" class="nav-link" data-path="/me">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 12a5 5 0 100-10 5 5 0 000 10z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path><path d="M20 22a8 8 0 10-16 0" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path></svg>
        <span>{t('sidebar.me')}</span>
      </a></li>
      {isAdmin && (
        <li><a href="/admin" class="nav-link" data-path="/admin">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 2l7 4v6c0 5-7 10-7 10s-7-5-7-10V6l7-4z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path><path d="M12 8v4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path></svg>
          <span>{t('sidebar.admin')}</span>
        </a></li>
      )}
    </ul>
  </nav>
  <div class="sidebar-controls">
    <div class="theme-switcher-container">
      <ThemeSwitcher size="medium" showLabel={true} />
    </div>
    <div class="language-switcher-container">
      <LanguageSwitcher pathBasedRouting={false} />
    </div>
  </div>
</aside>

<style>
  aside {
    position: fixed;
    top: 0;
    left: 0;
    width: 280px; /* Slightly wider */
    height: 100vh;
    padding: 25px;
    display: flex;
    flex-direction: column;
    gap: 40px; /* Space between header and nav */
    z-index: 1000;

    /* Glassmorphism styles with theme support */
    background: var(--bg-sidebar);
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
    border-right: 1px solid var(--border-color);
    box-shadow: 0 4px 30px var(--shadow-light);
    transition: all 0.3s ease;
  }

  .sidebar-header {
    display: flex;
    align-items: center;
    gap: 15px;
  }

  .sidebar-header svg {
    color: var(--text-primary);
    transition: color 0.3s ease;
  }

  .sidebar-header h2 {
    margin: 0;
    font-size: 1.5rem;
    color: var(--text-primary);
    transition: color 0.3s ease;
  }

  nav ul {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 10px; /* Space between links */
  }

  nav a {
    display: flex;
    align-items: center;
    gap: 15px;
    padding: 12px 15px;
    border-radius: 8px;
    text-decoration: none;
    color: var(--text-primary);
    font-size: 1.1rem;
    font-weight: 500;
    transition: all 0.3s ease;
  }

  nav a:hover,
  nav a.active {
    background-color: rgba(59, 130, 246, 0.1);
    color: var(--accent-color);
  }

  nav a svg {
    transition: all 0.3s ease;
    color: currentColor;
  }
  
  .sidebar-controls {
    margin-top: auto;
    display: flex;
    flex-direction: column;
    gap: 20px;
    padding: 20px 0;
  }

  .theme-switcher-container,
  .language-switcher-container {
    display: flex;
    justify-content: center;
  }

  /* Mobile responsiveness */
  @media (max-width: 768px) {
    aside {
      position: fixed;
      top: 0;
      left: 0;
      width: 250px;
      padding: 20px;
      gap: 30px;
      z-index: 1000;
    }

    .sidebar-header h2 {
      font-size: 1.3rem;
    }

    nav a {
      font-size: 1rem;
      padding: 10px 12px;
    }

    .sidebar-controls {
      gap: 15px;
      padding: 15px 0;
    }
  }
</style>

<script>
  // Navigation highlighting
  function updateActiveNavigation() {
    const currentPath = window.location.pathname;
    const navLinks = document.querySelectorAll('.nav-link');
    
    navLinks.forEach(link => {
      const linkPath = link.getAttribute('data-path');
      if (currentPath === linkPath || (linkPath === '/' && currentPath === '/') || currentPath.startsWith('/wfs/')) {
        if (linkPath === '/' && (currentPath === '/' || currentPath.startsWith('/wfs/'))) {
          link.classList.add('active');
        } else if (linkPath !== '/' && currentPath === linkPath) {
          link.classList.add('active');
        } else {
          link.classList.remove('active');
        }
      } else {
        link.classList.remove('active');
      }
    });
  }

  // Update navigation on page load
  document.addEventListener('DOMContentLoaded', updateActiveNavigation);
  
  // Update navigation when navigating (for SPAs)
  window.addEventListener('popstate', updateActiveNavigation);
</script>